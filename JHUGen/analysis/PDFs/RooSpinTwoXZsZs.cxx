/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooSpinTwoXZsZs.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

using namespace TMath;

ClassImp(RooSpinTwoXZsZs) 

RooSpinTwoXZsZs::RooSpinTwoXZsZs(const char *name, const char *title, 
				 RooAbsReal& _mzz,
				 RooAbsReal& _m1,
				 RooAbsReal& _m2,
				 RooAbsReal& _hs,
				 RooAbsReal& _h1,
				 RooAbsReal& _h2,
				 RooAbsReal& _Phi,
				 RooAbsReal& _Phi1,
				 RooAbsReal& _c1,
				 RooAbsReal& _phi1,
				 RooAbsReal& _c2,
				 RooAbsReal& _phi2,
				 RooAbsReal& _c3,
				 RooAbsReal& _phi3,
				 RooAbsReal& _c4,
				 RooAbsReal& _phi4,
				 RooAbsReal& _c5,
				 RooAbsReal& _phi5,
				 RooAbsReal& _c6,
				 RooAbsReal& _phi6,
				 RooAbsReal& _c7,
				 RooAbsReal& _phi7,
				 RooAbsReal& _fz1Val,
				 RooAbsReal& _fz2Val,
				 RooAbsReal& _R1Val,
				 RooAbsReal& _R2Val,
				 RooAbsReal& _mZ,
				 RooAbsReal& _gamZ) :
RooAbsPdf(name,title), 
mzz("mzz","mzz",this,_mzz),
m1("m1","m1",this,_m1),
m2("m2","m2",this,_m2),
hs("hs","hs",this,_hs),
h1("h1","h1",this,_h1),
h2("h2","h2",this,_h2),
Phi("Phi","Phi",this,_Phi),
Phi1("Phi1","Phi1",this,_Phi1),
c1("c1","c1",this,_c1),
phi1("phi1","phi1",this,_phi1),
c2("c2","c2",this,_c2),
phi2("phi2","phi2",this,_phi2),
c3("c3","c3",this,_c3),
phi3("phi3","phi3",this,_phi3),
c4("c4","c4",this,_c4),
phi4("phi4","phi4",this,_phi4),
c5("c5","c5",this,_c5),
phi5("phi5","phi5",this,_phi5),
c6("c6","c6",this,_c6),
phi6("phi6","phi6",this,_phi6),
c7("c7","c7",this,_c7),
phi7("phi7","phi7",this,_phi7),
fz1Val("fz1Val","fz1Val",this,_fz1Val),
fz2Val("fz2Val","fz2Val",this,_fz2Val),
R1Val("R1Val","R1Val",this,_R1Val),
R2Val("R2Val","R2Val",this,_R2Val),
mZ("mZ","mZ",this,_mZ),
gamZ("gamZ","gamZ",this,_gamZ)
{ 
} 


RooSpinTwoXZsZs::RooSpinTwoXZsZs(const RooSpinTwoXZsZs& other, const char* name) :  
RooAbsPdf(other,name), 
mzz("mzz",this,other.mzz),
m1("m1",this,other.m1),
m2("m2",this,other.m2),
hs("hs",this,other.hs),
h1("h1",this,other.h1),
h2("h2",this,other.h2),
Phi("Phi",this,other.Phi),
Phi1("Phi1",this,other.Phi1),
c1("c1",this,other.c1),
phi1("phi1",this,other.phi1),
c2("c2",this,other.c2),
phi2("phi2",this,other.phi2),
c3("c3",this,other.c3),
phi3("phi3",this,other.phi3),
c4("c4",this,other.c4),
phi4("phi4",this,other.phi4),
c5("c5",this,other.c5),
phi5("phi5",this,other.phi5),
c6("c6",this,other.c6),
phi6("phi6",this,other.phi6),
c7("c7",this,other.c7),
phi7("phi7",this,other.phi7),
fz1Val("fz1Val",this,other.fz1Val),
fz2Val("fz2Val",this,other.fz2Val),
R1Val("R1Val",this,other.R1Val),
R2Val("R2Val",this,other.R2Val),
mZ("mZ",this,other.mZ),
gamZ("gamZ",this,other.gamZ)
{ 
} 



Double_t RooSpinTwoXZsZs::evaluate() const 
{ 


  if( (m1+m2) > mzz || m2>m1 ) return 1e-9; 

  double nanval = sqrt((1 - TMath::Power(m1 - m2,2)/TMath::Power(mzz,2))*(1 - TMath::Power(m1 + m2,2)/TMath::Power(mzz,2)));
  
  if (nanval != nanval) return 1e-9;

  Double_t value=0;
  Double_t fz0Val=1-fz1Val-fz2Val;

  Double_t x = (mzz*mzz-m1*m1-m2*m2)/(2*m1*m2);

  //-----------------------------------------------------------------------
  // propagator
  
  Double_t betaValSquared = (1.-(pow(m1-m2,2)/pow(mzz,2)))*(1.-(pow(m1+m2,2)/pow(mzz,2)));
  Double_t betaVal = sqrt(betaValSquared);

  Double_t term1Coeff = (pow(m1,3))/( (pow(m1,2)-pow(mZ,2))*(pow(m1,2)-pow(mZ,2))+pow(mZ,2)*pow(gamZ,2) );
  Double_t term2Coeff = (pow(m2,3))/( (pow(m2,2)-pow(mZ,2))*(pow(m2,2)-pow(mZ,2))+pow(mZ,2)*pow(gamZ,2) );

  //-----------------------------------------------------------------------
  // amplitudes 

  Double_t f00Real = 
    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*pow(m1,3)*pow(m2,3) * ( 3/4 + (x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c2*pow(m1,3)*pow(m2,3) * (  - 4*(x*x-1) - 8*pow(x*x-1,2) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c3*pow(m1,3)*pow(m2,3) * (  - 8*pow(x*x-1,2) )

    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*m1*pow(m2,5) * (  - 1/2 - 1/2*(x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c2*m1*pow(m2,5) * ( 2*(x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*pow(m1,5)*m2 * (  - 1/2 - 1/2*(x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c2*pow(m1,5)*m2 * ( 2*(x*x-1) )

    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*(1/m1)*pow(m2,7) * ( 1/8 )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*pow(m1,7)*(1/m2) * ( 1/8 )

    + pow(sqrt(6),-1)*c1*m1*m2 * ( 1/2 + 1/2*(x*x-1) )
    + pow(sqrt(6),-1)*c2*m1*m2 * (  - 2*(x*x-1) )
    + pow(sqrt(6),-1)*c4*m1*m2 * ( 4*(x*x-1) )

    + pow(sqrt(6),-1)*c1*(1/m1)*pow(m2,3) * (  - 1/4 )
    + pow(sqrt(6),-1)*c1*pow(m1,3)*(1/m2) * (  - 1/4 )

    + pow(mzz,4)*pow(sqrt(6),-1)*c1*(1/m1)*(1/m2) * ( 1/8 );

  Double_t f00Imag=0;

  //-----------------------------------------------------------------------
  Double_t fppReal = 
    + pow(mzz,2)*pow(sqrt(6),-1)*c1 * ( 1/4 )

    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m2,4) * (  - 1/4 )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,5) * (  - 1/4 )

    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,2)*pow(m2,2) * ( 1/2 + (x*x-1) )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c2*pow(m1,2)*pow(m2,2) * ( 8*(x*x-1) );

  Double_t fppImag = 

    + 1*pow(mzz,-4)*pow(sqrt(6),-1)*c5*pow(m1,3)*pow(m2,3) * ( 8*pow(sqrt(x*x-1),3) )

    + 1*pow(sqrt(6),-1)*c6*m1*m2 * (  - 4*sqrt(x) );

  //-----------------------------------------------------------------------
  Double_t fmmReal = 
    + pow(mzz,2)*pow(sqrt(6),-1)*c1 * ( 1/4 )

    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,5) * (  - 1/4 )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m2,4) * (  - 1/4 )

    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,2)*pow(m2,2) * ( 1/2 + (x*x-1) )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c2*pow(m1,2)*pow(m2,2) * ( 8*(x*x-1) );

  Double_t fmmImag = 

    + 1*pow(mzz,-4)*pow(sqrt(6),-1)*c5*pow(m1,3)*pow(m2,3) * (  - 8*pow(sqrt(x*x-1),3) )

    + 1*pow(sqrt(6),-1)*c6*m1*m2 * ( 4*sqrt(x) );

  //-----------------------------------------------------------------------

  Double_t fp0Real = 
    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m2,5) * (  - 1/8 )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,2)*pow(m2,3) * ( 3/8 + 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,5)*m2 * (  - 3/8 - 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,6)*(1/m2) * ( 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m1,2)*m2 * ( 1/4 + 1/2*(x*x-1) )
    + (1/mzz)*(1/sqrt(2))*c4*pow(m1,2)*m2 * ( 2*(x*x-1) )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m2,3) * (  - 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m1,5)*(1/m2) * (  - 1/8 )

    + mzz*(1/sqrt(2))*c1*m2 * ( 1/8 )

    + mzz*(1/sqrt(2))*c1*pow(m1,2)*(1/m2) * (  - 1/8 )

    + pow(mzz,3)*(1/sqrt(2))*c1*(1/m2) * ( 1/8 );

  Double_t fp0Imag = 

    + 1*(1/pow(mzz,3))*(1/sqrt(2))*pow(m1,3)*pow(m2,2) * (  - 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1/mzz)*(1/sqrt(2))*c6*m1*pow(m2,2) * (  - sqrt(x) )

    + 1*(1/mzz)*(1/sqrt(2))*c6*pow(m1,3) * ( sqrt(x) )

    + 1*mzz*(1/sqrt(2))*c6*m1 * (  - sqrt(x) );

  //-----------------------------------------------------------------------
  Double_t f0pReal = 
    + (1/pow(mzz,3))*(1/sqrt(2))*c1*(1/m1)*pow(m2,6) * ( 1/8 )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*m1*pow(m2,4) * (  - 3/8 - 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,3)*pow(m2,2) * ( 3/8 + 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,5) * (  - 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*m1*pow(m2,2) * ( 1/4 + 1/2*(x*x-1) )
    + (1/mzz)*(1/sqrt(2))*c4*m1*pow(m2,2) * ( 2*(x*x-1) )

    + (1/mzz)*(1/sqrt(2))*c1*(1/m1)*pow(m2,4) * (  - 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m1,3) * (  - 1/8 )

    + mzz*(1/sqrt(2))*c1*(1/m1)*pow(m2,2) * (  - 1/8 )

    + mzz*(1/sqrt(2))*c1*m1 * ( 1/8 )

    + pow(mzz,3)*(1/sqrt(2))*c1*(1/m1) * ( 1/8 );

  Double_t f0pImag = 

    + 1*(1/pow(mzz,3))*(1/sqrt(2))*pow(m1,2)*pow(m2,3) * (  - 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1/mzz)*(1/sqrt(2))*c6*pow(m2,3) * ( sqrt(x) )

    + 1*(1/mzz)*(1/sqrt(2))*c6*pow(m1,2)*m2 * (  - sqrt(x) )

    + 1*mzz*(1/sqrt(2))*c6*m2 * (  - sqrt(x) );

  //-----------------------------------------------------------------------


  Double_t f0mReal = 
    + (1/pow(mzz,3))*(1/sqrt(2))*c1*(1/m1)*pow(m2,6) * ( 1/8 )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*m1*pow(m2,4) * (  - 3/8 - 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,3)*pow(m2,2) * ( 3/8 + 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,5) * (  - 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*m1*pow(m2,2) * ( 1/4 + 1/2*(x*x-1) )
    + (1/mzz)*(1/sqrt(2))*c4*m1*pow(m2,2) * ( 2*(x*x-1) )

    + (1/mzz)*(1/sqrt(2))*c1*(1/m1)*pow(m2,4) * (  - 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m1,3) * (  - 1/8 )

    + mzz*(1/sqrt(2))*c1*(1/m1)*pow(m2,2) * (  - 1/8 )

    + mzz*(1/sqrt(2))*c1*m1 * ( 1/8 )

    + pow(mzz,3)*(1/sqrt(2))*c1*(1/m1) * ( 1/8 );

  Double_t f0mImag = 

    + 1*(1/pow(mzz,3))*(1/sqrt(2))*pow(m1,2)*pow(m2,3) * ( 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1/mzz)*(1/sqrt(2))*c6*pow(m2,3) * (  - sqrt(x) )

    + 1*(1/mzz)*(1/sqrt(2))*c6*pow(m1,2)*m2 * ( sqrt(x) )

    + 1*mzz*(1/sqrt(2))*c6*m2 * ( sqrt(x) );

  //-----------------------------------------------------------------------

  Double_t fm0Real =
    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m2,5) * (  - 1/8 )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,2)*pow(m2,3) * ( 3/8 + 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,5)*m2 * (  - 3/8 - 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,6)*(1/m2) * ( 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m1,2)*m2 * ( 1/4 + 1/2*(x*x-1) )
    + (1/mzz)*(1/sqrt(2))*c4*pow(m1,2)*m2 * ( 2*(x*x-1) )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m2,3) * (  - 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m1,5)*(1/m2) * (  - 1/8 )

    + mzz*(1/sqrt(2))*c1*m2 * ( 1/8 )

    + mzz*(1/sqrt(2))*c1*pow(m1,2)*(1/m2) * (  - 1/8 )

    + pow(mzz,3)*(1/sqrt(2))*c1*(1/m2) * ( 1/8 );

  Double_t fm0Imag = 

    + 1*(1/pow(mzz,3))*(1/sqrt(2))*pow(m1,3)*pow(m2,2) * ( 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1/mzz)*(1/sqrt(2))*c6*m1*pow(m2,2) * ( sqrt(x) )

    + 1*(1/mzz)*(1/sqrt(2))*c6*pow(m1,3) * (  - sqrt(x) )

    + 1*mzz*(1/sqrt(2))*c6*m1 * ( sqrt(x) );

  //-----------------------------------------------------------------------
  Double_t fpmReal = 
    + pow(mzz,-2)*c1*pow(m1,5) * (  - 1/4 )
    + pow(mzz,-2)*c1*pow(m2,4) * (  - 1/4 )

    + pow(mzz,-2)*c1*pow(m1,2)*pow(m2,2) * ( 1/2 + (x*x-1) )

    + pow(mzz,2)*c1 * ( 1/4 );

  Double_t fpmImag = 0;

  //-----------------------------------------------------------------------

  Double_t fmpReal = 
    + pow(mzz,-2)*c1*pow(m2,4) * (  - 1/4 )
    + pow(mzz,-2)*c1*pow(m1,5) * (  - 1/4 )

    + pow(mzz,-2)*c1*pow(m1,2)*pow(m2,2) * ( 1/2 + (x*x-1) )

    + pow(mzz,2)*c1 * ( 1/4 );

  Double_t fmpImag = 0;

  //-----------------------------------------------------------------------
  
  Double_t f00 = sqrt(f00Imag*f00Imag + f00Real*f00Real);
  Double_t fpp = sqrt(fppImag*fppImag + fppReal*fppReal);
  Double_t fmm = sqrt(fmmImag*fmmImag + fmmReal*fmmReal);
  Double_t fp0 = sqrt(fp0Imag*fp0Imag + fp0Real*fp0Real);
  Double_t f0p = sqrt(f0pImag*f0pImag + f0pReal*f0pReal);
  Double_t fm0 = sqrt(fm0Imag*fm0Imag + fm0Real*fm0Real);
  Double_t f0m = sqrt(f0mImag*f0mImag + f0mReal*f0mReal);
  Double_t fpm= sqrt(fpmImag*fpmImag + fpmReal*fpmReal);
  Double_t fmp = sqrt(fmpImag*fmpImag + fmpReal*fmpReal);

  Double_t phi00=atan2(f00Imag,f00Real);
  Double_t phipp=atan2(fppImag,fppReal);
  Double_t phimm=atan2(fmmImag,fmmReal);
  Double_t phip0=atan2(fp0Imag,fp0Real);
  Double_t phi0p=atan2(f0pImag,f0pReal);
  Double_t phim0=atan2(fm0Imag,fm0Real);
  Double_t phi0m=atan2(f0mImag,f0mReal);
  Double_t phipm=atan2(fpmImag,fpmReal);
  Double_t phimp=atan2(fmpImag,fmpReal);

  //========================================================

  value+=(f00*(-1 + Power(h1,2))*(-1 + Power(h2,2))*
    (2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
     3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/32.;

  value+=(fmm*(1 + 2*R1Val*h1 + Power(h1,2))*(1 + 2*R2Val*h2 + Power(h2,2))*
    (2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
     3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/128.;

  value+=(fpp*(-1 + 2*R1Val*h1 - Power(h1,2))*(-1 + 2*R2Val*h2 - Power(h2,2))*
    (2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
     3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/128.;

  value+=(fp0*(-1 + 2*R1Val*h1 - Power(h1,2))*(-1 + Power(h2,2))*
    (fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
     (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/32.;

  value+=-(f0m*(-1 + Power(h1,2))*(1 + 2*R2Val*h2 + Power(h2,2))*
     (fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
      (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/32.;

  value+=(f0p*(-1 + Power(h1,2))*(-1 + 2*R2Val*h2 - Power(h2,2))*
    (fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
     (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/32.;

  value+=-(fm0*(1 + 2*R1Val*h1 + Power(h1,2))*(-1 + Power(h2,2))*
     (fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
      (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/32.;

  value+=-(fpm*(-1 + 2*R1Val*h1 - Power(h1,2))*(1 + 2*R2Val*h2 + Power(h2,2))*
     (4*fz1Val + fz2Val + 6*fz2Val*Power(hs,2) + (-4*fz1Val + fz2Val)*Power(hs,4) + 
      6*fz0Val*Power(-1 + Power(hs,2),2)))/256.;

  value+=-(fmp*(1 + 2*R1Val*h1 + Power(h1,2))*(-1 + 2*R2Val*h2 - Power(h2,2))*
     (4*fz1Val + fz2Val + 6*fz2Val*Power(hs,2) + (-4*fz1Val + fz2Val)*Power(hs,4) + 
      6*fz0Val*Power(-1 + Power(hs,2),2)))/256.;

  value+=(Sqrt(f00)*Sqrt(fmm)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*(R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*(2*fz0Val + 3*fz2Val - 
	6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
	3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4))*Cos(Phi - phimm))/32.;
  
  value+=(Sqrt(f00)*Sqrt(fpp)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*(-R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*(2*fz0Val + 3*fz2Val - 
	6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
	3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4))*Cos(Phi + phipp))/32.;

  value+=(Sqrt(3)*Sqrt(f00)*Sqrt(fp0)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*
	  (-1 + Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(phip0 - Phi1))/16.;

  value+=-(Sqrt(3)*Sqrt(f00)*Sqrt(f0m)*(-1 + Power(h1,2))*(R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	   (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(Phi - phi0m + Phi1))/16.;

  value+=(Sqrt(3)*Sqrt(f00)*Sqrt(f0p)*(-1 + Power(h1,2))*(R2Val - h2)*
	  Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(Phi + phi0p + Phi1))/16.;

  value+=(Sqrt(3)*Sqrt(f00)*Sqrt(fm0)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*
	  (-1 + Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(phim0 + Phi1))/16.;

  value+=(Sqrt(1.5)*Sqrt(f00)*Sqrt(fpm)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*(R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*(-1 + hs)*(1 + hs)*
	  (-2*fz0Val + fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(Phi - phipm + 2*Phi1))/32.;

  value+=-(Sqrt(f00)*Sqrt(fmp)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*(-R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*(4*fz1Val + fz2Val + 6*fz2Val*Power(hs,2) + 
  	 (-4*fz1Val + fz2Val)*Power(hs,4) + 6*fz0Val*Power(-1 + Power(hs,2),2))*
	   Cos(Phi + phimp + 2*Phi1))/64.;

  value+=(Sqrt(fmm)*Sqrt(fpp)*(-1 + Power(h1,2))*(-1 + Power(h2,2))*
	  (2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
	   3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4))*Cos(2*Phi - phimm + phipp))/64.;

  value+=-(Sqrt(3)*Sqrt(fmm)*Sqrt(fp0)*(-1 + Power(h1,2))*(R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	   (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(Phi - phimm + phip0 - Phi1))/32.;

  value+=(Sqrt(3)*Sqrt(f0m)*Sqrt(fmm)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*
	  (1 + 2*R2Val*h2 + Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(phi0m - phimm - Phi1))/32.;

  value+=(Sqrt(3)*Sqrt(f0p)*Sqrt(fmm)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*
	  (-1 + Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(2*Phi + phi0p - phimm + Phi1))/32.;

  value+=-(Sqrt(3)*Sqrt(fm0)*Sqrt(fmm)*(1 + 2*R1Val*h1 + Power(h1,2))*(R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	   (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(Phi + phim0 - phimm + Phi1))/32.;

  value+=(Sqrt(1.5)*Sqrt(fmm)*Sqrt(fpm)*(-1 + Power(h1,2))*(1 + 2*R2Val*h2 + Power(h2,2))*
	  (-1 + hs)*(1 + hs)*(-2*fz0Val + fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(phimm - phipm + 2*Phi1))/64.;

  value+=(Sqrt(1.5)*Sqrt(fmm)*Sqrt(fmp)*(1 + 2*R1Val*h1 + Power(h1,2))*(-1 + Power(h2,2))*
	  (-1 + hs)*(1 + hs)*(-2*fz0Val + fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(2*Phi - phimm + phimp + 2*Phi1))/64.;
  
  value+=(Sqrt(3)*Sqrt(fp0)*Sqrt(fpp)*(-1 + 2*R1Val*h1 - Power(h1,2))*(-R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(Phi - phip0 + phipp + Phi1))/32.;

  value+=(Sqrt(3)*Sqrt(f0m)*Sqrt(fpp)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*
	  (-1 + Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(2*Phi - phi0m + phipp + Phi1))/32.;

  value+=(Sqrt(3)*Sqrt(f0p)*Sqrt(fpp)*(R1Val - h1)*Sqrt(1 - Power(h1,2))*
	  (-1 + 2*R2Val*h2 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(phi0p - phipp + Phi1))/32.;

  value+=(Sqrt(3)*Sqrt(fm0)*Sqrt(fpp)*(-1 + Power(h1,2))*(R2Val - h2)*
	  Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(Phi - phim0 + phipp - Phi1))/32.;

  value+=-(Sqrt(1.5)*Sqrt(fpm)*Sqrt(fpp)*(-1 + 2*R1Val*h1 - Power(h1,2))*
	   (-1 + Power(h2,2))*(-1 + hs)*(1 + hs)*
	   (-2*fz0Val + fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(2*Phi - phipm + phipp + 2*Phi1))/64.;

  value+=-(Sqrt(1.5)*Sqrt(fmp)*Sqrt(fpp)*(-1 + Power(h1,2))*
	   (-1 + 2*R2Val*h2 - Power(h2,2))*(-1 + hs)*(1 + hs)*
	   (-2*fz0Val + fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(phimp - phipp + 2*Phi1))/64.;

  value+=-(Sqrt(f0m)*Sqrt(fp0)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*(R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*(fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
	 (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4))*Cos(Phi - phi0m + phip0))/16.;

  value+=-(Sqrt(f0p)*Sqrt(fp0)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*(-R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*(-1 + Power(hs,2))*
	   (-fz1Val + fz2Val - (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(Phi + phi0p - phip0 + 2*Phi1))/16.;
  
  value+=-(Sqrt(fm0)*Sqrt(fp0)*(-1 + Power(h1,2))*(-1 + Power(h2,2))*(-1 + Power(hs,2))*
	   (-fz1Val + fz2Val - (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(phim0 - phip0 + 2*Phi1))/16.;

  value+=(Sqrt(fp0)*Sqrt(fpm)*(-1 + 2*R1Val*h1 - Power(h1,2))*(R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-6*fz0Val + 3*fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(Phi + phip0 - phipm + Phi1))/(32.*Sqrt(2));

  value+=(Sqrt(fmp)*Sqrt(fp0)*(6*fz0Val - 4*fz1Val + fz2Val)*(-1 + Power(h1,2))*(-R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*hs*Power(1 - Power(hs,2),1.5)*
	  Cos(Phi + phimp - phip0 + 3*Phi1))/(32.*Sqrt(2));
  
  value+=-(Sqrt(f0m)*Sqrt(f0p)*(-1 + Power(h1,2))*(-1 + Power(h2,2))*(-1 + Power(hs,2))*
	   (-fz1Val + fz2Val - (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(2*Phi - phi0m + phi0p + 2*Phi1))/16.;
  
  value+=-(Sqrt(f0m)*Sqrt(fm0)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*(R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*(-1 + Power(hs,2))*
	   (-fz1Val + fz2Val - (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(Phi - phi0m + phim0 + 2*Phi1))/16.;
  
  value+=(Sqrt(f0m)*Sqrt(fpm)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*
	  (1 + 2*R2Val*h2 + Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-6*fz0Val + 3*fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(phi0m - phipm + Phi1))/(32.*Sqrt(2));
  
  value+=-(Sqrt(f0m)*Sqrt(fmp)*(6*fz0Val - 4*fz1Val + fz2Val)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*
	   (-1 + Power(h2,2))*hs*Power(1 - Power(hs,2),1.5)*
	   Cos(2*Phi - phi0m + phimp + 3*Phi1))/(32.*Sqrt(2));
  
  value+=-(Sqrt(f0p)*Sqrt(fm0)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*(-R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*(fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
	 (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4))*Cos(Phi + phi0p - phim0))/16.;

  value+=(Sqrt(f0p)*Sqrt(fpm)*(6*fz0Val - 4*fz1Val + fz2Val)*(R1Val - h1)*Sqrt(1 - Power(h1,2))*
	  (-1 + Power(h2,2))*hs*Power(1 - Power(hs,2),1.5)*
	  Cos(2*Phi + phi0p - phipm + 3*Phi1))/(32.*Sqrt(2));
  
  value+=-(Sqrt(f0p)*Sqrt(fmp)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*
	   (-1 + 2*R2Val*h2 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	   (-6*fz0Val + 3*fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(phi0p - phimp - Phi1))/(32.*Sqrt(2));
  
  value+=(Sqrt(fm0)*Sqrt(fpm)*(6*fz0Val - 4*fz1Val + fz2Val)*(-1 + Power(h1,2))*(R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*hs*Power(1 - Power(hs,2),1.5)*
	  Cos(Phi + phim0 - phipm + 3*Phi1))/(32.*Sqrt(2));
  
  value+=(Sqrt(fm0)*Sqrt(fmp)*(1 + 2*R1Val*h1 + Power(h1,2))*(R2Val - h2)*
	  Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-6*fz0Val + 3*fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(Phi - phim0 + phimp + Phi1))/(32.*Sqrt(2));
  
  value+=(Sqrt(fmp)*Sqrt(fpm)*(6*fz0Val - 4*fz1Val + fz2Val)*(-1 + Power(h1,2))*
	  (-1 + Power(h2,2))*Power(-1 + Power(hs,2),2)*
	  Cos(2*Phi + phimp - phipm + 4*Phi1))/128.;

  return value*term1Coeff*term2Coeff*betaVal;
    
    
} 


Int_t RooSpinTwoXZsZs::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const
{

  if (matchArgs(allVars,analVars,RooArgSet(*hs.absArg(),*h1.absArg(),*h2.absArg(),*Phi.absArg(),*Phi1.absArg()))) return 6 ;
  if (matchArgs(allVars,analVars,hs,h1,h2,Phi)) return 5 ;
  if (matchArgs(allVars,analVars,hs,h1,h2,Phi1)) return 4 ;
  if (matchArgs(allVars,analVars,hs,h1,Phi,Phi1)) return 3 ;
  if (matchArgs(allVars,analVars,hs,h2,Phi,Phi1)) return 2 ;
  if (matchArgs(allVars,analVars,h1,h2,Phi,Phi1)) return 1 ;
    return 0 ;
}
Double_t RooSpinTwoXZsZs::analyticalIntegral(Int_t code, const char* /*rangeName*/) const
{

  if( (m1+m2) > mzz ) return 1e-9; 

  double nanval = sqrt((1 - TMath::Power(m1 - m2,2)/TMath::Power(mzz,2))*(1 - TMath::Power(m1 + m2,2)/TMath::Power(mzz,2)));
  
  if (nanval != nanval) return 1e-9;

  Double_t integral=0;
  Double_t fz0Val=1-fz1Val-fz2Val;

  Double_t x = (mzz*mzz-m1*m1-m2*m2)/(2*m1*m2);

  //-----------------------------------------------------------------------
  // propogator/phase space factor

  Double_t betaValSquared =  (1.-(pow(m1-m2,2)/pow(mzz,2)))*(1.-(pow(m1+m2,2)/pow(mzz,2)));
  Double_t betaVal = sqrt(betaValSquared);

  Double_t term1Coeff = (pow(m1,3))/( (pow(m1,2)-pow(mZ,2))*(pow(m1,2)-pow(mZ,2))+pow(mZ,2)*pow(gamZ,2) );
  Double_t term2Coeff = (pow(m2,3))/( (pow(m2,2)-pow(mZ,2))*(pow(m2,2)-pow(mZ,2))+pow(mZ,2)*pow(gamZ,2) );

  //-----------------------------------------------------------------------
  // amplitudes
  Double_t f00Real = 
    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*pow(m1,3)*pow(m2,3) * ( 3/4 + (x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c2*pow(m1,3)*pow(m2,3) * (  - 4*(x*x-1) - 8*pow(x*x-1,2) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c3*pow(m1,3)*pow(m2,3) * (  - 8*pow(x*x-1,2) )

    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*m1*pow(m2,5) * (  - 1/2 - 1/2*(x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c2*m1*pow(m2,5) * ( 2*(x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*pow(m1,5)*m2 * (  - 1/2 - 1/2*(x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c2*pow(m1,5)*m2 * ( 2*(x*x-1) )

    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*(1/m1)*pow(m2,7) * ( 1/8 )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*pow(m1,7)*(1/m2) * ( 1/8 )

    + pow(sqrt(6),-1)*c1*m1*m2 * ( 1/2 + 1/2*(x*x-1) )
    + pow(sqrt(6),-1)*c2*m1*m2 * (  - 2*(x*x-1) )
    + pow(sqrt(6),-1)*c4*m1*m2 * ( 4*(x*x-1) )

    + pow(sqrt(6),-1)*c1*(1/m1)*pow(m2,3) * (  - 1/4 )
    + pow(sqrt(6),-1)*c1*pow(m1,3)*(1/m2) * (  - 1/4 )

    + pow(mzz,4)*pow(sqrt(6),-1)*c1*(1/m1)*(1/m2) * ( 1/8 );

  Double_t f00Imag = 0; 

  //-----------------------------------------------------------------------
  Double_t fppReal = 
    + pow(mzz,2)*pow(sqrt(6),-1)*c1 * ( 1/4 )

    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m2,4) * (  - 1/4 )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,5) * (  - 1/4 )

    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,2)*pow(m2,2) * ( 1/2 + (x*x-1) )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c2*pow(m1,2)*pow(m2,2) * ( 8*(x*x-1) );

  Double_t fppImag = 

    + 1*pow(mzz,-4)*pow(sqrt(6),-1)*c5*pow(m1,3)*pow(m2,3) * ( 8*pow(sqrt(x*x-1),3) )

    + 1*pow(sqrt(6),-1)*c6*m1*m2 * (  - 4*sqrt(x) );

  //-----------------------------------------------------------------------
  Double_t fmmReal = 
    + pow(mzz,2)*pow(sqrt(6),-1)*c1 * ( 1/4 )

    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,5) * (  - 1/4 )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m2,4) * (  - 1/4 )

    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,2)*pow(m2,2) * ( 1/2 + (x*x-1) )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c2*pow(m1,2)*pow(m2,2) * ( 8*(x*x-1) );

  Double_t fmmImag = 

    + 1*pow(mzz,-4)*pow(sqrt(6),-1)*c5*pow(m1,3)*pow(m2,3) * (  - 8*pow(sqrt(x*x-1),3) )

    + 1*pow(sqrt(6),-1)*c6*m1*m2 * ( 4*sqrt(x) );

  //-----------------------------------------------------------------------

  Double_t fp0Real = 
    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m2,5) * (  - 1/8 )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,2)*pow(m2,3) * ( 3/8 + 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,5)*m2 * (  - 3/8 - 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,6)*(1/m2) * ( 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m1,2)*m2 * ( 1/4 + 1/2*(x*x-1) )
    + (1/mzz)*(1/sqrt(2))*c4*pow(m1,2)*m2 * ( 2*(x*x-1) )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m2,3) * (  - 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m1,5)*(1/m2) * (  - 1/8 )

    + mzz*(1/sqrt(2))*c1*m2 * ( 1/8 )

    + mzz*(1/sqrt(2))*c1*pow(m1,2)*(1/m2) * (  - 1/8 )

    + pow(mzz,3)*(1/sqrt(2))*c1*(1/m2) * ( 1/8 );

  Double_t fp0Imag = 

    + 1*(1/pow(mzz,3))*(1/sqrt(2))*pow(m1,3)*pow(m2,2) * (  - 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1/mzz)*(1/sqrt(2))*c6*m1*pow(m2,2) * (  - sqrt(x) )

    + 1*(1/mzz)*(1/sqrt(2))*c6*pow(m1,3) * ( sqrt(x) )

    + 1*mzz*(1/sqrt(2))*c6*m1 * (  - sqrt(x) );

  //-----------------------------------------------------------------------
  Double_t f0pReal = 
    + (1/pow(mzz,3))*(1/sqrt(2))*c1*(1/m1)*pow(m2,6) * ( 1/8 )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*m1*pow(m2,4) * (  - 3/8 - 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,3)*pow(m2,2) * ( 3/8 + 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,5) * (  - 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*m1*pow(m2,2) * ( 1/4 + 1/2*(x*x-1) )
    + (1/mzz)*(1/sqrt(2))*c4*m1*pow(m2,2) * ( 2*(x*x-1) )

    + (1/mzz)*(1/sqrt(2))*c1*(1/m1)*pow(m2,4) * (  - 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m1,3) * (  - 1/8 )

    + mzz*(1/sqrt(2))*c1*(1/m1)*pow(m2,2) * (  - 1/8 )

    + mzz*(1/sqrt(2))*c1*m1 * ( 1/8 )

    + pow(mzz,3)*(1/sqrt(2))*c1*(1/m1) * ( 1/8 );

  Double_t f0pImag = 

    + 1*(1/pow(mzz,3))*(1/sqrt(2))*pow(m1,2)*pow(m2,3) * (  - 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1/mzz)*(1/sqrt(2))*c6*pow(m2,3) * ( sqrt(x) )

    + 1*(1/mzz)*(1/sqrt(2))*c6*pow(m1,2)*m2 * (  - sqrt(x) )

    + 1*mzz*(1/sqrt(2))*c6*m2 * (  - sqrt(x) );

  //-----------------------------------------------------------------------


  Double_t f0mReal = 
    + (1/pow(mzz,3))*(1/sqrt(2))*c1*(1/m1)*pow(m2,6) * ( 1/8 )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*m1*pow(m2,4) * (  - 3/8 - 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,3)*pow(m2,2) * ( 3/8 + 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,5) * (  - 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*m1*pow(m2,2) * ( 1/4 + 1/2*(x*x-1) )
    + (1/mzz)*(1/sqrt(2))*c4*m1*pow(m2,2) * ( 2*(x*x-1) )

    + (1/mzz)*(1/sqrt(2))*c1*(1/m1)*pow(m2,4) * (  - 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m1,3) * (  - 1/8 )

    + mzz*(1/sqrt(2))*c1*(1/m1)*pow(m2,2) * (  - 1/8 )

    + mzz*(1/sqrt(2))*c1*m1 * ( 1/8 )

    + pow(mzz,3)*(1/sqrt(2))*c1*(1/m1) * ( 1/8 );

  Double_t f0mImag = 

    + 1*(1/pow(mzz,3))*(1/sqrt(2))*pow(m1,2)*pow(m2,3) * ( 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1/mzz)*(1/sqrt(2))*c6*pow(m2,3) * (  - sqrt(x) )

    + 1*(1/mzz)*(1/sqrt(2))*c6*pow(m1,2)*m2 * ( sqrt(x) )

    + 1*mzz*(1/sqrt(2))*c6*m2 * ( sqrt(x) );

  //-----------------------------------------------------------------------

  Double_t fm0Real =
    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m2,5) * (  - 1/8 )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,2)*pow(m2,3) * ( 3/8 + 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,5)*m2 * (  - 3/8 - 1/2*(x*x-1) )

    + (1/pow(mzz,3))*(1/sqrt(2))*c1*pow(m1,6)*(1/m2) * ( 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m1,2)*m2 * ( 1/4 + 1/2*(x*x-1) )
    + (1/mzz)*(1/sqrt(2))*c4*pow(m1,2)*m2 * ( 2*(x*x-1) )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m2,3) * (  - 1/8 )

    + (1/mzz)*(1/sqrt(2))*c1*pow(m1,5)*(1/m2) * (  - 1/8 )

    + mzz*(1/sqrt(2))*c1*m2 * ( 1/8 )

    + mzz*(1/sqrt(2))*c1*pow(m1,2)*(1/m2) * (  - 1/8 )

    + pow(mzz,3)*(1/sqrt(2))*c1*(1/m2) * ( 1/8 );

  Double_t fm0Imag = 

    + 1*(1/pow(mzz,3))*(1/sqrt(2))*pow(m1,3)*pow(m2,2) * ( 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1/mzz)*(1/sqrt(2))*c6*m1*pow(m2,2) * ( sqrt(x) )

    + 1*(1/mzz)*(1/sqrt(2))*c6*pow(m1,3) * (  - sqrt(x) )

    + 1*mzz*(1/sqrt(2))*c6*m1 * ( sqrt(x) );

  //-----------------------------------------------------------------------
  Double_t fpmReal = 
    + pow(mzz,-2)*c1*pow(m1,5) * (  - 1/4 )
    + pow(mzz,-2)*c1*pow(m2,4) * (  - 1/4 )

    + pow(mzz,-2)*c1*pow(m1,2)*pow(m2,2) * ( 1/2 + (x*x-1) )

    + pow(mzz,2)*c1 * ( 1/4 );

  Double_t fpmImag = 0;

  //-----------------------------------------------------------------------

  Double_t fmpReal = 
    + pow(mzz,-2)*c1*pow(m2,4) * (  - 1/4 )
    + pow(mzz,-2)*c1*pow(m1,5) * (  - 1/4 )

    + pow(mzz,-2)*c1*pow(m1,2)*pow(m2,2) * ( 1/2 + (x*x-1) )

    + pow(mzz,2)*c1 * ( 1/4 );

  Double_t fmpImag = 0;

  //-----------------------------------------------------------------------
  
  Double_t f00 = sqrt(f00Imag*f00Imag + f00Real*f00Real);
  Double_t fpp = sqrt(fppImag*fppImag + fppReal*fppReal);
  Double_t fmm = sqrt(fmmImag*fmmImag + fmmReal*fmmReal);
  Double_t fp0 = sqrt(fp0Imag*fp0Imag + fp0Real*fp0Real);
  Double_t f0p = sqrt(f0pImag*f0pImag + f0pReal*f0pReal);
  Double_t fm0 = sqrt(fm0Imag*fm0Imag + fm0Real*fm0Real);
  Double_t f0m = sqrt(f0mImag*f0mImag + f0mReal*f0mReal);
  Double_t fpm= sqrt(fpmImag*fpmImag + fpmReal*fpmReal);
  Double_t fmp = sqrt(fmpImag*fmpImag + fmpReal*fmpReal);

  Double_t phi00=atan2(f00Imag,f00Real);
  Double_t phipp=atan2(fppImag,fppReal);
  Double_t phimm=atan2(fmmImag,fmmReal);
  Double_t phip0=atan2(fp0Imag,fp0Real);
  Double_t phi0p=atan2(f0pImag,f0pReal);
  Double_t phim0=atan2(fm0Imag,fm0Real);
  Double_t phi0m=atan2(f0mImag,f0mReal);
  Double_t phipm=atan2(fpmImag,fpmReal);
  Double_t phimp=atan2(fmpImag,fmpReal);

  //-----------------------------------------------------------------------
  
  switch(code)
    {
            
    case 6:
      {
  
	integral=0;

	integral+=
	  (32*f00*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*fmm*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*fpp*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*fp0*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*f0m*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*f0p*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*fm0*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*fpm*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*fmp*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;

	return term1Coeff*term2Coeff*betaVal*integral;
      }
    case 5:
      {

	integral=0;

	integral+=
	  (16*f00*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fmm*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fpp*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fp0*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*f0m*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*f0p*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fm0*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fpm*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fmp*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (Sqrt(f00)*Sqrt(fmm)*(fz0Val + fz1Val + fz2Val)*Power(Pi(),3)*R1Val*R2Val*
	   Cos(Phi - phimm))/20.;
	integral+=
	  (Sqrt(f00)*Sqrt(fpp)*(fz0Val + fz1Val + fz2Val)*Power(Pi(),3)*R1Val*R2Val*
	   Cos(Phi + phipp))/20.;
	integral+=
	  (Sqrt(f00)*Sqrt(fpm)*(-2*(fz0Val + fz1Val) + 3*fz2Val)*Power(Pi(),3)*R1Val*R2Val*
	   Cos(Phi + 2*Phi1 - phipm))/(40.*Sqrt(6));
	integral+=
	  (Sqrt(f00)*Sqrt(fmp)*(fz0Val + fz1Val + fz2Val)*Power(Pi(),3)*R1Val*R2Val*
	   Cos(Phi + 2*Phi1 + phimp))/20.;
	integral+=
	  (8*Sqrt(fmm)*Sqrt(fpp)*(fz0Val + fz1Val + fz2Val)*Pi()*
	   Cos(2*Phi - phimm + phipp))/45.;
	integral+=
	  (-4*Sqrt(0.6666666666666666)*Sqrt(fmm)*Sqrt(fpm)*(2*(fz0Val + fz1Val) - 3*fz2Val)*Pi()*
	   Cos(2*Phi1 + phimm - phipm))/45.;
	integral+=
	  (-4*Sqrt(0.6666666666666666)*Sqrt(fmm)*Sqrt(fmp)*(2*(fz0Val + fz1Val) - 3*fz2Val)*Pi()*
	   Cos(2*Phi + 2*Phi1 - phimm + phimp))/45.;
	integral+=
	  (-4*Sqrt(0.6666666666666666)*Sqrt(fpm)*Sqrt(fpp)*(2*(fz0Val + fz1Val) - 3*fz2Val)*Pi()*
	   Cos(2*Phi + 2*Phi1 - phipm + phipp))/45.;
	integral+= 
	  (-4*Sqrt(0.6666666666666666)*Sqrt(fmp)*Sqrt(fpp)*(2*(fz0Val + fz1Val) - 3*fz2Val)*Pi()*
	   Cos(2*Phi1 + phimp - phipp))/45.;
	  

	return term1Coeff*term2Coeff*betaVal*integral;

      }
    case 4:
      {
	  
	integral=0;
	integral+=
	  (16*f00*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fmm*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fpp*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fp0*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*f0m*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*f0p*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fm0*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fpm*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fmp*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (Sqrt(f00)*Sqrt(fmm)*(fz0Val + fz1Val + fz2Val)*Power(Pi(),3)*R1Val*R2Val*
	   Cos(Phi - phimm))/20.;
	integral+=
	  (Sqrt(f00)*Sqrt(fpp)*(fz0Val + fz1Val + fz2Val)*Power(Pi(),3)*R1Val*R2Val*
	   Cos(Phi + phipp))/20.;
	integral+=
	  (8*Sqrt(fmm)*Sqrt(fpp)*(fz0Val + fz1Val + fz2Val)*Pi()*
	   Cos(2*Phi - phimm + phipp))/45.;
	integral+=
	  (Sqrt(f0m)*Sqrt(fp0)*(fz0Val + fz1Val + fz2Val)*Power(Pi(),3)*R1Val*R2Val*
	   Cos(Phi - phi0m + phip0))/20.;
	integral+=
	  (Sqrt(f0p)*Sqrt(fm0)*(fz0Val + fz1Val + fz2Val)*Power(Pi(),3)*R1Val*R2Val*
	   Cos(Phi + phi0p - phim0))/20.;

	return term1Coeff*term2Coeff*betaVal*integral;

      }
    case 3:
      {

	integral+=
	  (-8*f00*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + Power(h2,2)))/15.;
	integral+=
	  (4*fmm*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(1 + 2*R2Val*h2 + Power(h2,2)))/15.;
	integral+=
	  (-4*fpp*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + 2*R2Val*h2 - Power(h2,2)))/15.;
	integral+=
	  (-8*fp0*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + Power(h2,2)))/15.;
	integral+=
	  (4*f0m*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(1 + 2*R2Val*h2 + Power(h2,2)))/15.;
	integral+=
	  (-4*f0p*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + 2*R2Val*h2 - Power(h2,2)))/15.;
	integral+=
	  (-8*fm0*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + Power(h2,2)))/15.;
	integral+=
	  (4*fpm*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(1 + 2*R2Val*h2 + Power(h2,2)))/15.;
	integral+=
	  (-4*fmp*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + 2*R2Val*h2 - Power(h2,2)))/15.;

	return term1Coeff*term2Coeff*betaVal*integral;

      }
    case 2:
      {

	integral=0;

	integral+=
	  (-8*f00*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + Power(h1,2)))/15.;
	integral+=
	  (4*fmm*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(1 + 2*R1Val*h1 + Power(h1,2)))/15.;
	integral+=
	  (-4*fpp*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + 2*R1Val*h1 - Power(h1,2)))/15.;
	integral+=
	  (-4*fp0*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + 2*R1Val*h1 - Power(h1,2)))/15.;
	integral+=
	  (-8*f0m*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + Power(h1,2)))/15.;
	integral+=
	  (-8*f0p*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + Power(h1,2)))/15.;
	integral+=
	  (4*fm0*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(1 + 2*R1Val*h1 + Power(h1,2)))/15.;
	integral+=
	  (-4*fpm*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + 2*R1Val*h1 - Power(h1,2)))/15.;
	integral+=
	  (4*fmp*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(1 + 2*R1Val*h1 + Power(h1,2)))/15.;
	  
	return betaVal*term1Coeff*term2Coeff*integral;

      }
    case 1:
      {
	  
	integral=0;

	integral+=	  
	  (2*f00*Power(Pi(),2)*(2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
				3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (2*fmm*Power(Pi(),2)*(2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
				3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (2*fpp*Power(Pi(),2)*(2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
				3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (4*fp0*Power(Pi(),2)*(fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
				(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (4*f0m*Power(Pi(),2)*(fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
				(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (4*f0p*Power(Pi(),2)*(fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
				(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (4*fm0*Power(Pi(),2)*(fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
				(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (fpm*Power(Pi(),2)*(4*fz1Val + fz2Val + 6*fz2Val*Power(hs,2) + 
			      (-4*fz1Val + fz2Val)*Power(hs,4) + 6*fz0Val*Power(-1 + Power(hs,2),2)))/9.;
	integral+=
	  (fmp*Power(Pi(),2)*(4*fz1Val + fz2Val + 6*fz2Val*Power(hs,2) + 
			      (-4*fz1Val + fz2Val)*Power(hs,4) + 6*fz0Val*Power(-1 + Power(hs,2),2)))/9.;
	  
	return betaVal*term2Coeff*term1Coeff*integral;
      }

    }
  assert(0) ;
  return 0 ;
}

