/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooSpinTwoXZsZs.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

using namespace TMath;

ClassImp(RooSpinTwoXZsZs) 

RooSpinTwoXZsZs::RooSpinTwoXZsZs(const char *name, const char *title, 
				 RooAbsReal& _mzz,
				 RooAbsReal& _m1,
				 RooAbsReal& _m2,
				 RooAbsReal& _hs,
				 RooAbsReal& _h1,
				 RooAbsReal& _h2,
				 RooAbsReal& _Phi,
				 RooAbsReal& _Phi1,
				 RooAbsReal& _c1Val,
				 RooAbsReal& _c2Val,
				 RooAbsReal& _c3Val,
				 RooAbsReal& _c4Val,
				 RooAbsReal& _c5Val,
				 RooAbsReal& _c6Val,
				 RooAbsReal& _c7Val,
				 RooAbsReal& _useGTerm,
				 RooAbsReal& _g1Val,
				 RooAbsReal& _g2Val,
				 RooAbsReal& _g3Val,
				 RooAbsReal& _g4Val,
				 RooAbsReal& _g5Val,
				 RooAbsReal& _g6Val,
				 RooAbsReal& _g7Val,
				 RooAbsReal& _g8Val,
				 RooAbsReal& _g9Val,
				 RooAbsReal& _g10Val,
				 RooAbsReal& _fz1Val,
				 RooAbsReal& _fz2Val,
				 RooAbsReal& _R1Val,
				 RooAbsReal& _R2Val,
				 RooAbsReal& _mZ,
				 RooAbsReal& _gamZ) :
RooAbsPdf(name,title), 
mzz("mzz","mzz",this,_mzz),
m1("m1","m1",this,_m1),
m2("m2","m2",this,_m2),
hs("hs","hs",this,_hs),
h1("h1","h1",this,_h1),
h2("h2","h2",this,_h2),
Phi("Phi","Phi",this,_Phi),
Phi1("Phi1","Phi1",this,_Phi1),
c1Val("c1Val","c1Val",this,_c1Val),
c2Val("c2Val","c2Val",this,_c2Val),
c3Val("c3Val","c3Val",this,_c3Val),
c4Val("c4Val","c4Val",this,_c4Val),
c5Val("c5Val","c5Val",this,_c5Val),
c6Val("c6Val","c6Val",this,_c6Val),
c7Val("c7Val","c7Val",this,_c7Val),
useGTerm("useGTerm","useGTerm",this,_useGTerm),
g1Val("g1Val","g1Val",this,_g1Val),
g2Val("g2Val","g2Val",this,_g2Val),
g3Val("g3Val","g3Val",this,_g3Val),
g4Val("g4Val","g4Val",this,_g4Val),
g5Val("g5Val","g5Val",this,_g5Val),
g6Val("g6Val","g6Val",this,_g6Val),
g7Val("g7Val","g7Val",this,_g7Val),
g8Val("g8Val","g8Val",this,_g8Val),
g9Val("g9Val","g9Val",this,_g9Val),
g10Val("g10Val","g10Val",this,_g10Val),
fz1Val("fz1Val","fz1Val",this,_fz1Val),
fz2Val("fz2Val","fz2Val",this,_fz2Val),
R1Val("R1Val","R1Val",this,_R1Val),
R2Val("R2Val","R2Val",this,_R2Val),
mZ("mZ","mZ",this,_mZ),
gamZ("gamZ","gamZ",this,_gamZ)
{ 
} 


RooSpinTwoXZsZs::RooSpinTwoXZsZs(const RooSpinTwoXZsZs& other, const char* name) :  
RooAbsPdf(other,name), 
mzz("mzz",this,other.mzz),
m1("m1",this,other.m1),
m2("m2",this,other.m2),
hs("hs",this,other.hs),
h1("h1",this,other.h1),
h2("h2",this,other.h2),
Phi("Phi",this,other.Phi),
Phi1("Phi1",this,other.Phi1),
c1Val("c1Val",this,other.c1Val),
c2Val("c2Val",this,other.c2Val),
c3Val("c3Val",this,other.c3Val),
c4Val("c4Val",this,other.c4Val),
c5Val("c5Val",this,other.c5Val),
c6Val("c6Val",this,other.c6Val),
c7Val("c7Val",this,other.c7Val),
useGTerm("useGTerm",this,other.useGTerm),
g1Val("g1Val",this,other.g1Val),
g2Val("g2Val",this,other.g2Val),
g3Val("g3Val",this,other.g3Val),
g4Val("g4Val",this,other.g4Val),
g5Val("g5Val",this,other.g5Val),
g6Val("g6Val",this,other.g6Val),
g7Val("g7Val",this,other.g7Val),
g8Val("g8Val",this,other.g8Val),
g9Val("g9Val",this,other.g9Val),
g10Val("g10Val",this,other.g10Val),
fz1Val("fz1Val",this,other.fz1Val),
fz2Val("fz2Val",this,other.fz2Val),
R1Val("R1Val",this,other.R1Val),
R2Val("R2Val",this,other.R2Val),
mZ("mZ",this,other.mZ),
gamZ("gamZ",this,other.gamZ)
{ 
} 



Double_t RooSpinTwoXZsZs::evaluate() const 
{ 
  bool isZZ = true;
  if ( mZ < 90.) isZZ = false;
  if ( isZZ ) {
    if( (m1+m2) > mzz || m2>m1 ) return 1e-9; 
  } else {
    if( (m1+m2) > mzz ) return 1e-9; 
  }
  double nanval = sqrt((1 - TMath::Power(m1 - m2,2)/TMath::Power(mzz,2))*(1 - TMath::Power(m1 + m2,2)/TMath::Power(mzz,2)));
  if (nanval != nanval) return 1e-9;

  // set the c1->c7 terms directly from the inputs
  double c1 = c1Val;
  double c2 = c2Val;
  double c3 = c3Val;
  double c4 = c4Val;
  double c5 = c5Val;
  double c6 = c6Val;
  double c7 = c7Val;
 
  // calculate the c1->c7 from g
  if ( useGTerm > 0. ) {
    double Lambda = 1000.; // the new physics cutoff
    double s = (mzz*mzz-m1*m1-m2*m2)/2.;
    double kappa =  s / (Lambda*Lambda);
    c1 = 2*g1Val + 2*g2Val*kappa*pow((1+mZ*mZ/s),2) + 2*g5Val*(mZ*mZ)/s;
    c2 - -0.5*g1Val + g3Val*kappa*(1-mZ*mZ/s) + 2*g4Val*kappa + g7Val*kappa*mZ*mZ/s;
    c3 = -1.0*(g2Val/2.0+g3Val+2.0*g4Val)*kappa*mzz*mzz/s;
    c4 = -g1Val - g2Val*kappa - (g2Val+g3Val+g6Val)*kappa*(mZ*mZ/s);
    c5 = 2*g8Val*kappa*(mzz*mzz)/s;
    c6 = g9Val;
    c7 = g10Val*kappa*(mzz*mzz)/s;
  }
 
  Double_t value=0;
  Double_t fz0Val=1-fz1Val-fz2Val;

  Double_t x = (mzz*mzz-m1*m1-m2*m2)/(2.0*m1*m2);

  //-----------------------------------------------------------------------
  // propagator
  //-----------------------------------------------------------------------
  
  Double_t betaValSquared = (1.-(pow(m1-m2,2)/pow(mzz,2)))*(1.-(pow(m1+m2,2)/pow(mzz,2)));
  Double_t betaVal = sqrt(betaValSquared);

  Double_t term1Coeff = (pow(m1,3))/( (pow(m1,2)-pow(mZ,2))*(pow(m1,2)-pow(mZ,2))+pow(mZ,2)*pow(gamZ,2) );
  Double_t term2Coeff = (pow(m2,3))/( (pow(m2,2)-pow(mZ,2))*(pow(m2,2)-pow(mZ,2))+pow(mZ,2)*pow(gamZ,2) );

  //-----------------------------------------------------------------------
  // amplitudes 
  // See http://www.pha.jhu.edu/~gritsan/FORM/result_spin2.txt
  // -----------------------------------------------------------------------

  Double_t f00Real = 
    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*pow(m1,3)*pow(m2,3) * ( 3/4 + (x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c2*pow(m1,3)*pow(m2,3) * (  - 4*(x*x-1) - 8*pow(x*x-1,2) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c3*pow(m1,3)*pow(m2,3) * (  - 8*pow(x*x-1,2) )

    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*m1*pow(m2,5) * (  - 1.0/2.0 - 1.0/2.0*(x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c2*m1*pow(m2,5) * ( 2*(x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*pow(m1,5)*m2 * (  - 1.0/2.0 - 1.0/2.0*(x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c2*pow(m1,5)*m2 * ( 2*(x*x-1) )

    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*(1.0/m1)*pow(m2,7) * ( 1.0/8.0 )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*pow(m1,7)*(1.0/m2) * ( 1.0/8.0 )

    + pow(sqrt(6),-1)*c1*m1*m2 * ( 1.0/2.0 + 1.0/2.0*(x*x-1) )
    + pow(sqrt(6),-1)*c2*m1*m2 * (  - 2*(x*x-1) )
    + pow(sqrt(6),-1)*c4*m1*m2 * ( 4*(x*x-1) )

    + pow(sqrt(6),-1)*c1*(1.0/m1)*pow(m2,3) * (  - 1.0/4.0 )
    + pow(sqrt(6),-1)*c1*pow(m1,3)*(1.0/m2) * (  - 1.0/4.0 )

    + pow(mzz,4)*pow(sqrt(6),-1)*c1*(1.0/m1)*(1.0/m2) * ( 1.0/8.0 ); 


  Double_t f00Imag = 0; 

  //-----------------------------------------------------------------------
  Double_t fppReal = 
    + pow(mzz,2)*pow(sqrt(6),-1)*c1 * ( 1./4. )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m2,4) * (  - 1.0/4.0 )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,4) * (  - 1.0/4.0 )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,2)*pow(m2,2) * ( 1.0/2.0 + (x*x-1) )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c2*pow(m1,2)*pow(m2,2) * ( 8*(x*x-1) );

  Double_t fppImag = 

    + 1*pow(mzz,-4)*pow(sqrt(6),-1)*c5*pow(m1,3)*pow(m2,3) * ( 8*pow(sqrt(x*x-1),3) )

    + 1*pow(sqrt(6),-1)*c6*m1*m2 * (  - 4*sqrt(x*x-1.) );
  
  //-----------------------------------------------------------------------
  Double_t fmmReal = 
    + pow(mzz,2)*pow(sqrt(6),-1)*c1 * ( 1.0/4.0 )

    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,4) * (  - 1.0/4.0 )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m2,4) * (  - 1.0/4.0 )

    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,2)*pow(m2,2) * ( 1.0/2.0 + (x*x-1) )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c2*pow(m1,2)*pow(m2,2) * ( 8*(x*x-1) );

  Double_t fmmImag = 

    + 1*pow(mzz,-4)*pow(sqrt(6),-1)*c5*pow(m1,3)*pow(m2,3) * (  - 8*pow(sqrt(x*x-1),3) )

    + 1*pow(sqrt(6),-1)*c6*m1*m2 * ( 4*sqrt(x*x-1.) );

  //-----------------------------------------------------------------------

  Double_t fp0Real = 

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m2,5) * (  - 1.0/8.0 )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,2)*pow(m2,3) * ( 3.0/8.0 + 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,4)*m2 * (  - 3.0/8.0 - 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,6)*(1.0/m2) * ( 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m1,2)*m2 * ( 1.0/4.0 + 1.0/2.0*(x*x-1) )
    + (1.0/mzz)*(1.0/sqrt(2))*c4*pow(m1,2)*m2 * ( 2*(x*x-1) )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m2,3) * (  - 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m1,4)*(1.0/m2) * (  - 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*m2 * ( 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*pow(m1,2)*(1.0/m2) * (  - 1.0/8.0 )

    + pow(mzz,3)*(1.0/sqrt(2))*c1*(1.0/m2) * ( 1.0/8.0 );

  Double_t fp0Imag = 

    + 1*(1.0/pow(mzz,3))*(1.0/sqrt(2))*pow(m1,3)*pow(m2,2) * (  - 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*m1*pow(m2,2) * (  - sqrt(x*x-1.) )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*pow(m1,3) * ( sqrt(x*x-1.) )

    + 1*mzz*(1.0/sqrt(2))*c6*m1 * (  - sqrt(x*x-1.) );



  //-----------------------------------------------------------------------
  Double_t f0pReal = 
    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*(1.0/m1)*pow(m2,6) * ( 1.0/8.0 )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*m1*pow(m2,4) * (  - 3.0/8.0 - 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,3)*pow(m2,2) * ( 3.0/8.0 + 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,5) * (  - 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*m1*pow(m2,2) * ( 1.0/4.0 + 1.0/2.0*(x*x-1) )
    + (1.0/mzz)*(1.0/sqrt(2))*c4*m1*pow(m2,2) * ( 2*(x*x-1) )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*(1.0/m1)*pow(m2,4) * (  - 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m1,3) * (  - 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*(1.0/m1)*pow(m2,2) * (  - 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*m1 * ( 1.0/8.0 )

    + pow(mzz,3)*(1.0/sqrt(2))*c1*(1.0/m1) * ( 1.0/8.0 );

  Double_t f0pImag = 

    + 1*(1.0/pow(mzz,3))*(1.0/sqrt(2))*pow(m1,2)*pow(m2,3) * (  - 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*pow(m2,3) * ( sqrt(x*x-1.) )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*pow(m1,2)*m2 * (  - sqrt(x*x-1.) )

    + 1*mzz*(1.0/sqrt(2))*c6*m2 * (  - sqrt(x*x-1.) );

  //-----------------------------------------------------------------------


  Double_t f0mReal = 
    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*(1.0/m1)*pow(m2,6) * ( 1.0/8.0 )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*m1*pow(m2,4) * (  - 3.0/8.0 - 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,3)*pow(m2,2) * ( 3.0/8.0 + 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,5) * (  - 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*m1*pow(m2,2) * ( 1.0/4.0 + 1.0/2.0*(x*x-1) )
    + (1.0/mzz)*(1.0/sqrt(2))*c4*m1*pow(m2,2) * ( 2*(x*x-1) )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*(1.0/m1)*pow(m2,4) * (  - 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m1,3) * (  - 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*(1.0/m1)*pow(m2,2) * (  - 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*m1 * ( 1.0/8.0 )

    + pow(mzz,3)*(1.0/sqrt(2))*c1*(1.0/m1) * ( 1.0/8.0 );

  Double_t f0mImag = 

    + 1*(1.0/pow(mzz,3))*(1.0/sqrt(2))*pow(m1,2)*pow(m2,3) * ( 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*pow(m2,3) * (  - sqrt(x*x-1.) )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*pow(m1,2)*m2 * ( sqrt(x*x-1.) )

    + 1*mzz*(1.0/sqrt(2))*c6*m2 * ( sqrt(x*x-1.) );

  //-----------------------------------------------------------------------

  Double_t fm0Real =
    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m2,5) * (  - 1.0/8.0 )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,2)*pow(m2,3) * ( 3.0/8.0 + 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,4)*m2 * (  - 3.0/8.0 - 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,6)*(1.0/m2) * ( 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m1,2)*m2 * ( 1.0/4.0 + 1.0/2.0*(x*x-1) )
    + (1.0/mzz)*(1.0/sqrt(2))*c4*pow(m1,2)*m2 * ( 2*(x*x-1) )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m2,3) * (  - 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m1,4)*(1.0/m2) * (  - 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*m2 * ( 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*pow(m1,2)*(1.0/m2) * (  - 1.0/8.0 )

    + pow(mzz,3)*(1.0/sqrt(2))*c1*(1.0/m2) * ( 1.0/8.0 );

  Double_t fm0Imag = 

    + 1*(1.0/pow(mzz,3))*(1.0/sqrt(2))*pow(m1,3)*pow(m2,2) * ( 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*m1*pow(m2,2) * ( sqrt(x*x-1.) )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*pow(m1,3) * (  - sqrt(x*x-1.) )

    + 1*mzz*(1.0/sqrt(2))*c6*m1 * ( sqrt(x*x-1.) );

  //-----------------------------------------------------------------------
  Double_t fpmReal = 
    + pow(mzz,-2)*c1*pow(m1,4) * (  - 1.0/4.0 )
    + pow(mzz,-2)*c1*pow(m2,4) * (  - 1.0/4.0 )

    + pow(mzz,-2)*c1*pow(m1,2)*pow(m2,2) * ( 1.0/2.0 + (x*x-1) )

    + pow(mzz,2)*c1 * ( 1.0/4.0 );

  Double_t fpmImag = 0;

  //-----------------------------------------------------------------------

  Double_t fmpReal = 
    + pow(mzz,-2)*c1*pow(m2,4) * (  - 1.0/4.0 )
    + pow(mzz,-2)*c1*pow(m1,4) * (  - 1.0/4.0 )

    + pow(mzz,-2)*c1*pow(m1,2)*pow(m2,2) * ( 1.0/2.0 + (x*x-1) )

    + pow(mzz,2)*c1 * ( 1.0/4.0 );

  Double_t fmpImag = 0;

  //-----------------------------------------------------------------------
  Double_t f00 = f00Imag*f00Imag + f00Real*f00Real;
  Double_t fpp = fppImag*fppImag + fppReal*fppReal;
  Double_t fmm = fmmImag*fmmImag + fmmReal*fmmReal;
  Double_t fp0 = fp0Imag*fp0Imag + fp0Real*fp0Real;
  Double_t f0p = f0pImag*f0pImag + f0pReal*f0pReal;
  Double_t fm0 = fm0Imag*fm0Imag + fm0Real*fm0Real;
  Double_t f0m = f0mImag*f0mImag + f0mReal*f0mReal;
  Double_t fpm=  fpmImag*fpmImag + fpmReal*fpmReal;
  Double_t fmp = fmpImag*fmpImag + fmpReal*fmpReal;
  
  double norm = f00 + fpp + fmm + fp0 + f0p + fm0 + f0m + fpm + fmp; 
  f00 = f00 / norm;
  fpp = fpp / norm;
  fmm = fmm / norm;
  fp0 = fp0 / norm;
  f0p = f0p / norm;
  fm0 = fm0 / norm;
  f0m = f0m / norm;
  fpm = fpm / norm;
  fmp = fmp / norm;

  Double_t phi00=atan2(f00Imag,f00Real);
  Double_t phipp=atan2(fppImag,fppReal);
  Double_t phimm=atan2(fmmImag,fmmReal);
  Double_t phip0=atan2(fp0Imag,fp0Real);
  Double_t phi0p=atan2(f0pImag,f0pReal);
  Double_t phim0=atan2(fm0Imag,fm0Real);
  Double_t phi0m=atan2(f0mImag,f0mReal);
  Double_t phipm=atan2(fpmImag,fpmReal);
  Double_t phimp=atan2(fmpImag,fmpReal);

  /*
  // 
  // Set the value by hand for the mX = 250 2m+
  // 

  fpp = 0.013;
  fmm = 0.013;
  fpm = 0.282;
  fmp = fpm;
  fp0 = 0.075;
  f0p = fp0;
  f0m = 0.075;
  fm0 = f0m;
  f00 = 1.-fpp-fmm-fpm-fmp-fp0-f0p-fm0-f0m;

  phi00 = 0.;
  phipp = 0.;
  phimm = 0.;
  phip0 = 0.;
  phi0p = 0.;
  phim0 = 0.;
  phi0m = 0.;
  phipm = 0.;
  phimp = 0.;
  */

  //========================================================
  
  // 
  //  The 45 terms
  // 
  
  value+=(f00*(-1 + Power(h1,2))*(-1 + Power(h2,2))*
    (2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
     3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/32.; // terms[1]

  value+=(fmm*(1 + 2*R1Val*h1 + Power(h1,2))*(1 + 2*R2Val*h2 + Power(h2,2))*
    (2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
     3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/128.; // terms[2]

  value+=(fpp*(-1 + 2*R1Val*h1 - Power(h1,2))*(-1 + 2*R2Val*h2 - Power(h2,2))*
    (2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
     3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/128.; // terms[3]

  value+=(fp0*(-1 + 2*R1Val*h1 - Power(h1,2))*(-1 + Power(h2,2))*
    (fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
     (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/32.; // terms[4]

  value+=-(f0m*(-1 + Power(h1,2))*(1 + 2*R2Val*h2 + Power(h2,2))*
     (fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
      (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/32.; // terms[5]

  value+=(f0p*(-1 + Power(h1,2))*(-1 + 2*R2Val*h2 - Power(h2,2))*
    (fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
     (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/32.; // terms[6]

  value+=-(fm0*(1 + 2*R1Val*h1 + Power(h1,2))*(-1 + Power(h2,2))*
     (fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
      (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/32.; // terms[7]

  value+=-(fpm*(-1 + 2*R1Val*h1 - Power(h1,2))*(1 + 2*R2Val*h2 + Power(h2,2))*
     (4*fz1Val + fz2Val + 6*fz2Val*Power(hs,2) + (-4*fz1Val + fz2Val)*Power(hs,4) + 
      6*fz0Val*Power(-1 + Power(hs,2),2)))/256.; // terms[8]

  value+=-(fmp*(1 + 2*R1Val*h1 + Power(h1,2))*(-1 + 2*R2Val*h2 - Power(h2,2))*
     (4*fz1Val + fz2Val + 6*fz2Val*Power(hs,2) + (-4*fz1Val + fz2Val)*Power(hs,4) + 
      6*fz0Val*Power(-1 + Power(hs,2),2)))/256.; // terms[9]

  value+=(Sqrt(f00)*Sqrt(fmm)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*(R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*(2*fz0Val + 3*fz2Val - 
	6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
	3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4))*Cos(Phi - phimm))/32.; // terms[10]
  
  value+=(Sqrt(f00)*Sqrt(fpp)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*(-R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*(2*fz0Val + 3*fz2Val - 
	6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
        3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4))*Cos(Phi + phipp))/32.; // terms[11]

  value+=(Sqrt(3)*Sqrt(f00)*Sqrt(fp0)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*
	  (-1 + Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(phip0 - Phi1))/16.; // terms[12]

  value+=-(Sqrt(3)*Sqrt(f00)*Sqrt(f0m)*(-1 + Power(h1,2))*(R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	   (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(Phi - phi0m + Phi1))/16.; // terms[13]

  value+=(Sqrt(3)*Sqrt(f00)*Sqrt(f0p)*(-1 + Power(h1,2))*(R2Val - h2)*
	  Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(Phi + phi0p + Phi1))/16.; // terms[14]

  value+=(Sqrt(3)*Sqrt(f00)*Sqrt(fm0)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*
	  (-1 + Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(phim0 + Phi1))/16.; // terms[15]

  value+=(Sqrt(1.5)*Sqrt(f00)*Sqrt(fpm)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*(R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*(-1 + hs)*(1 + hs)*
	  (-2*fz0Val + fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(Phi - phipm + 2*Phi1))/32.; // terms[16]

  value+=-(Sqrt(f00)*Sqrt(fmp)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*(-R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*(4*fz1Val + fz2Val + 6*fz2Val*Power(hs,2) + 
  	 (-4*fz1Val + fz2Val)*Power(hs,4) + 6*fz0Val*Power(-1 + Power(hs,2),2))*
	   Cos(Phi + phimp + 2*Phi1))/64.; // terms[17]

  value+=(Sqrt(fmm)*Sqrt(fpp)*(-1 + Power(h1,2))*(-1 + Power(h2,2))*
	  (2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
	   3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4))*Cos(2*Phi - phimm + phipp))/64.; // terms[18]

  value+=-(Sqrt(3)*Sqrt(fmm)*Sqrt(fp0)*(-1 + Power(h1,2))*(R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	   (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(Phi - phimm + phip0 - Phi1))/32.; // terms[19]

  value+=(Sqrt(3)*Sqrt(f0m)*Sqrt(fmm)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*
	  (1 + 2*R2Val*h2 + Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(phi0m - phimm - Phi1))/32.; // terms[20]

  value+=(Sqrt(3)*Sqrt(f0p)*Sqrt(fmm)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*
	  (-1 + Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(2*Phi + phi0p - phimm + Phi1))/32.; // terms[21]

  value+=-(Sqrt(3)*Sqrt(fm0)*Sqrt(fmm)*(1 + 2*R1Val*h1 + Power(h1,2))*(R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	   (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(Phi + phim0 - phimm + Phi1))/32.; // terms[22]

  value+=(Sqrt(1.5)*Sqrt(fmm)*Sqrt(fpm)*(-1 + Power(h1,2))*(1 + 2*R2Val*h2 + Power(h2,2))*
	  (-1 + hs)*(1 + hs)*(-2*fz0Val + fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(phimm - phipm + 2*Phi1))/64.; // terms[23]

  value+=(Sqrt(1.5)*Sqrt(fmm)*Sqrt(fmp)*(1 + 2*R1Val*h1 + Power(h1,2))*(-1 + Power(h2,2))*
	  (-1 + hs)*(1 + hs)*(-2*fz0Val + fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(2*Phi - phimm + phimp + 2*Phi1))/64.; // terms[24]
  
  value+=(Sqrt(3)*Sqrt(fp0)*Sqrt(fpp)*(-1 + 2*R1Val*h1 - Power(h1,2))*(-R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(Phi - phip0 + phipp + Phi1))/32.; // terms[25]

  value+=(Sqrt(3)*Sqrt(f0m)*Sqrt(fpp)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*
	  (-1 + Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(2*Phi - phi0m + phipp + Phi1))/32.; // terms[26]

  value+=(Sqrt(3)*Sqrt(f0p)*Sqrt(fpp)*(R1Val - h1)*Sqrt(1 - Power(h1,2))*
	  (-1 + 2*R2Val*h2 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(phi0p - phipp + Phi1))/32.; // terms[27]

  value+=(Sqrt(3)*Sqrt(fm0)*Sqrt(fpp)*(-1 + Power(h1,2))*(R2Val - h2)*
	  Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-2*fz0Val + 2*fz1Val - fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(Phi - phim0 + phipp - Phi1))/32.; // terms[28]

  value+=-(Sqrt(1.5)*Sqrt(fpm)*Sqrt(fpp)*(-1 + 2*R1Val*h1 - Power(h1,2))*
	   (-1 + Power(h2,2))*(-1 + hs)*(1 + hs)*
	   (-2*fz0Val + fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(2*Phi - phipm + phipp + 2*Phi1))/64.; // terms[29]

  value+=-(Sqrt(1.5)*Sqrt(fmp)*Sqrt(fpp)*(-1 + Power(h1,2))*
	   (-1 + 2*R2Val*h2 - Power(h2,2))*(-1 + hs)*(1 + hs)*
	   (-2*fz0Val + fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(phimp - phipp + 2*Phi1))/64.; // terms[30]

  value+=-(Sqrt(f0m)*Sqrt(fp0)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*(R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*(fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
           (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4))*Cos(Phi - phi0m + phip0))/16.; // terms[31]

  value+=-(Sqrt(f0p)*Sqrt(fp0)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*(-R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*(-1 + Power(hs,2))*
	   (-fz1Val + fz2Val - (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(Phi + phi0p - phip0 + 2*Phi1))/16.; // terms[32]
  
  value+=-(Sqrt(fm0)*Sqrt(fp0)*(-1 + Power(h1,2))*(-1 + Power(h2,2))*(-1 + Power(hs,2))*
	   (-fz1Val + fz2Val - (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(phim0 - phip0 + 2*Phi1))/16.; // terms[33]

  value+=(Sqrt(fp0)*Sqrt(fpm)*(-1 + 2*R1Val*h1 - Power(h1,2))*(R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-6*fz0Val + 3*fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(Phi + phip0 - phipm + Phi1))/(32.*Sqrt(2)); // terms[34]

  value+=(Sqrt(fmp)*Sqrt(fp0)*(6*fz0Val - 4*fz1Val + fz2Val)*(-1 + Power(h1,2))*(-R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*hs*Power(1 - Power(hs,2),1.5)*
	  Cos(Phi + phimp - phip0 + 3*Phi1))/(32.*Sqrt(2)); // terms[35]
  
  value+=-(Sqrt(f0m)*Sqrt(f0p)*(-1 + Power(h1,2))*(-1 + Power(h2,2))*(-1 + Power(hs,2))*
	   (-fz1Val + fz2Val - (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(2*Phi - phi0m + phi0p + 2*Phi1))/16.; // terms[36]
  
  value+=-(Sqrt(f0m)*Sqrt(fm0)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*(R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*(-1 + Power(hs,2))*
	   (-fz1Val + fz2Val - (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(Phi - phi0m + phim0 + 2*Phi1))/16.; // terms[37]
  
  value+=(Sqrt(f0m)*Sqrt(fpm)*(-R1Val + h1)*Sqrt(1 - Power(h1,2))*
	  (1 + 2*R2Val*h2 + Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-6*fz0Val + 3*fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(phi0m - phipm + Phi1))/(32.*Sqrt(2)); // terms[38]
   
  value+=-(Sqrt(f0m)*Sqrt(fmp)*(6*fz0Val - 4*fz1Val + fz2Val)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*
	   (-1 + Power(h2,2))*hs*Power(1 - Power(hs,2),1.5)*
	   Cos(2*Phi - phi0m + phimp + 3*Phi1))/(32.*Sqrt(2)); // terms[39]
  
  value+=-(Sqrt(f0p)*Sqrt(fm0)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*(-R2Val + h2)*
	   Sqrt(1 - Power(h2,2))*(fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
           (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4))*Cos(Phi + phi0p - phim0))/16.; // terms[40]

  value+=(Sqrt(f0p)*Sqrt(fpm)*(6*fz0Val - 4*fz1Val + fz2Val)*(R1Val - h1)*Sqrt(1 - Power(h1,2))*
	  (-1 + Power(h2,2))*hs*Power(1 - Power(hs,2),1.5)*
	  Cos(2*Phi + phi0p - phipm + 3*Phi1))/(32.*Sqrt(2)); // terms[41]
  
  value+=-(Sqrt(f0p)*Sqrt(fmp)*(R1Val + h1)*Sqrt(1 - Power(h1,2))*
	   (-1 + 2*R2Val*h2 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	   (-6*fz0Val + 3*fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	   Cos(phi0p - phimp - Phi1))/(32.*Sqrt(2)); // terms[42]
  
  value+=(Sqrt(fm0)*Sqrt(fpm)*(6*fz0Val - 4*fz1Val + fz2Val)*(-1 + Power(h1,2))*(R2Val + h2)*
	  Sqrt(1 - Power(h2,2))*hs*Power(1 - Power(hs,2),1.5)*
	  Cos(Phi + phim0 - phipm + 3*Phi1))/(32.*Sqrt(2)); // terms[43]
  
  value+=(Sqrt(fm0)*Sqrt(fmp)*(1 + 2*R1Val*h1 + Power(h1,2))*(R2Val - h2)*
	  Sqrt(1 - Power(h2,2))*hs*Sqrt(1 - Power(hs,2))*
	  (-6*fz0Val + 3*fz2Val + (6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,2))*
	  Cos(Phi - phim0 + phimp + Phi1))/(32.*Sqrt(2)); // terms[44]
  
  value+=(Sqrt(fmp)*Sqrt(fpm)*(6*fz0Val - 4*fz1Val + fz2Val)*(-1 + Power(h1,2))*
	  (-1 + Power(h2,2))*Power(-1 + Power(hs,2),2)*
	  Cos(2*Phi + phimp - phipm + 4*Phi1))/128.; // terms[45]

  return value*term1Coeff*term2Coeff*betaVal;
    
    
} 


Int_t RooSpinTwoXZsZs::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const
{

  if (matchArgs(allVars,analVars,RooArgSet(*hs.absArg(),*h1.absArg(),*h2.absArg(),*Phi.absArg(),*Phi1.absArg()))) return 6 ;
  if (matchArgs(allVars,analVars,hs,h1,h2,Phi)) return 5 ;
  if (matchArgs(allVars,analVars,hs,h1,h2,Phi1)) return 4 ;
  if (matchArgs(allVars,analVars,hs,h1,Phi,Phi1)) return 3 ;
  if (matchArgs(allVars,analVars,hs,h2,Phi,Phi1)) return 2 ;
  if (matchArgs(allVars,analVars,h1,h2,Phi,Phi1)) return 1 ;
    return 0 ;
}
Double_t RooSpinTwoXZsZs::analyticalIntegral(Int_t code, const char* /*rangeName*/) const
{

  bool isZZ = true;
  if ( mZ < 90.) isZZ = false;
  if ( isZZ ) {
    if( (m1+m2) > mzz || m2>m1 ) return 1e-9; 
  } else {
    if( (m1+m2) > mzz ) return 1e-9; 
  }
  double nanval = sqrt((1 - TMath::Power(m1 - m2,2)/TMath::Power(mzz,2))*(1 - TMath::Power(m1 + m2,2)/TMath::Power(mzz,2)));
  if (nanval != nanval) return 1e-9;

  // set the c1->c7 terms directly from the inputs
  double c1 = c1Val;
  double c2 = c2Val;
  double c3 = c3Val;
  double c4 = c4Val;
  double c5 = c5Val;
  double c6 = c6Val;
  double c7 = c7Val;
  
  // calculate the c1->c7 from g
  if ( useGTerm > 0. ) {
    double Lambda = 1000.; // the new physics cutoff
    double s = (mzz*mzz-m1*m1-m2*m2)/2.;
    double kappa =  s / (Lambda*Lambda);
    c1 = 2*g1Val + 2*g2Val*kappa*pow((1+mZ*mZ/s),2) + 2*g5Val*(mZ*mZ)/s;
    c2 - -0.5*g1Val + g3Val*kappa*(1-mZ*mZ/s) + 2*g4Val*kappa + g7Val*kappa*mZ*mZ/s;
    c3 = -1.0*(g2Val/2.0+g3Val+2.0*g4Val)*kappa*mzz*mzz/s;
    c4 = -g1Val - g2Val*kappa - (g2Val+g3Val+g6Val)*kappa*(mZ*mZ/s);
    c5 = 2*g8Val*kappa*(mzz*mzz)/s;
    c6 = g9Val;
    c7 = g10Val*kappa*(mzz*mzz)/s;
  }

  Double_t integral=0;
  Double_t fz0Val=1-fz1Val-fz2Val;

  Double_t x = (mzz*mzz-m1*m1-m2*m2)/(2.0*m1*m2);

  //-----------------------------------------------------------------------
  // propagator
  //-----------------------------------------------------------------------
  
  Double_t betaValSquared = (1.-(pow(m1-m2,2)/pow(mzz,2)))*(1.-(pow(m1+m2,2)/pow(mzz,2)));
  Double_t betaVal = sqrt(betaValSquared);

  Double_t term1Coeff = (pow(m1,3))/( (pow(m1,2)-pow(mZ,2))*(pow(m1,2)-pow(mZ,2))+pow(mZ,2)*pow(gamZ,2) );
  Double_t term2Coeff = (pow(m2,3))/( (pow(m2,2)-pow(mZ,2))*(pow(m2,2)-pow(mZ,2))+pow(mZ,2)*pow(gamZ,2) );

  //-----------------------------------------------------------------------
  // amplitudes 
  // See http://www.pha.jhu.edu/~gritsan/FORM/result_spin2.txt
  // -----------------------------------------------------------------------

  Double_t f00Real = 
    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*pow(m1,3)*pow(m2,3) * ( 3/4 + (x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c2*pow(m1,3)*pow(m2,3) * (  - 4*(x*x-1) - 8*pow(x*x-1,2) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c3*pow(m1,3)*pow(m2,3) * (  - 8*pow(x*x-1,2) )

    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*m1*pow(m2,5) * (  - 1.0/2.0 - 1.0/2.0*(x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c2*m1*pow(m2,5) * ( 2*(x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*pow(m1,5)*m2 * (  - 1.0/2.0 - 1.0/2.0*(x*x-1) )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c2*pow(m1,5)*m2 * ( 2*(x*x-1) )

    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*(1.0/m1)*pow(m2,7) * ( 1.0/8.0 )
    + pow(mzz,-4)*pow(sqrt(6),-1)*c1*pow(m1,7)*(1.0/m2) * ( 1.0/8.0 )

    + pow(sqrt(6),-1)*c1*m1*m2 * ( 1.0/2.0 + 1.0/2.0*(x*x-1) )
    + pow(sqrt(6),-1)*c2*m1*m2 * (  - 2*(x*x-1) )
    + pow(sqrt(6),-1)*c4*m1*m2 * ( 4*(x*x-1) )

    + pow(sqrt(6),-1)*c1*(1.0/m1)*pow(m2,3) * (  - 1.0/4.0 )
    + pow(sqrt(6),-1)*c1*pow(m1,3)*(1.0/m2) * (  - 1.0/4.0 )

    + pow(mzz,4)*pow(sqrt(6),-1)*c1*(1.0/m1)*(1.0/m2) * ( 1.0/8.0 ); 


  Double_t f00Imag = 0; 

  //-----------------------------------------------------------------------
  Double_t fppReal = 
    + pow(mzz,2)*pow(sqrt(6),-1)*c1 * ( 1./4. )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m2,4) * (  - 1.0/4.0 )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,4) * (  - 1.0/4.0 )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,2)*pow(m2,2) * ( 1.0/2.0 + (x*x-1) )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c2*pow(m1,2)*pow(m2,2) * ( 8*(x*x-1) );

  Double_t fppImag = 

    + 1*pow(mzz,-4)*pow(sqrt(6),-1)*c5*pow(m1,3)*pow(m2,3) * ( 8*pow(sqrt(x*x-1),3) )

    + 1*pow(sqrt(6),-1)*c6*m1*m2 * (  - 4*sqrt(x*x-1.) );
  
  //-----------------------------------------------------------------------
  Double_t fmmReal = 
    + pow(mzz,2)*pow(sqrt(6),-1)*c1 * ( 1.0/4.0 )

    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,4) * (  - 1.0/4.0 )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m2,4) * (  - 1.0/4.0 )

    + pow(mzz,-2)*pow(sqrt(6),-1)*c1*pow(m1,2)*pow(m2,2) * ( 1.0/2.0 + (x*x-1) )
    + pow(mzz,-2)*pow(sqrt(6),-1)*c2*pow(m1,2)*pow(m2,2) * ( 8*(x*x-1) );

  Double_t fmmImag = 

    + 1*pow(mzz,-4)*pow(sqrt(6),-1)*c5*pow(m1,3)*pow(m2,3) * (  - 8*pow(sqrt(x*x-1),3) )

    + 1*pow(sqrt(6),-1)*c6*m1*m2 * ( 4*sqrt(x*x-1.) );

  //-----------------------------------------------------------------------

  Double_t fp0Real = 

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m2,5) * (  - 1.0/8.0 )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,2)*pow(m2,3) * ( 3.0/8.0 + 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,4)*m2 * (  - 3.0/8.0 - 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,6)*(1.0/m2) * ( 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m1,2)*m2 * ( 1.0/4.0 + 1.0/2.0*(x*x-1) )
    + (1.0/mzz)*(1.0/sqrt(2))*c4*pow(m1,2)*m2 * ( 2*(x*x-1) )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m2,3) * (  - 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m1,4)*(1.0/m2) * (  - 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*m2 * ( 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*pow(m1,2)*(1.0/m2) * (  - 1.0/8.0 )

    + pow(mzz,3)*(1.0/sqrt(2))*c1*(1.0/m2) * ( 1.0/8.0 );

  Double_t fp0Imag = 

    + 1*(1.0/pow(mzz,3))*(1.0/sqrt(2))*pow(m1,3)*pow(m2,2) * (  - 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*m1*pow(m2,2) * (  - sqrt(x*x-1.) )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*pow(m1,3) * ( sqrt(x*x-1.) )

    + 1*mzz*(1.0/sqrt(2))*c6*m1 * (  - sqrt(x*x-1.) );



  //-----------------------------------------------------------------------
  Double_t f0pReal = 
    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*(1.0/m1)*pow(m2,6) * ( 1.0/8.0 )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*m1*pow(m2,4) * (  - 3.0/8.0 - 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,3)*pow(m2,2) * ( 3.0/8.0 + 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,5) * (  - 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*m1*pow(m2,2) * ( 1.0/4.0 + 1.0/2.0*(x*x-1) )
    + (1.0/mzz)*(1.0/sqrt(2))*c4*m1*pow(m2,2) * ( 2*(x*x-1) )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*(1.0/m1)*pow(m2,4) * (  - 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m1,3) * (  - 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*(1.0/m1)*pow(m2,2) * (  - 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*m1 * ( 1.0/8.0 )

    + pow(mzz,3)*(1.0/sqrt(2))*c1*(1.0/m1) * ( 1.0/8.0 );

  Double_t f0pImag = 

    + 1*(1.0/pow(mzz,3))*(1.0/sqrt(2))*pow(m1,2)*pow(m2,3) * (  - 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*pow(m2,3) * ( sqrt(x*x-1.) )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*pow(m1,2)*m2 * (  - sqrt(x*x-1.) )

    + 1*mzz*(1.0/sqrt(2))*c6*m2 * (  - sqrt(x*x-1.) );

  //-----------------------------------------------------------------------


  Double_t f0mReal = 
    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*(1.0/m1)*pow(m2,6) * ( 1.0/8.0 )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*m1*pow(m2,4) * (  - 3.0/8.0 - 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,3)*pow(m2,2) * ( 3.0/8.0 + 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,5) * (  - 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*m1*pow(m2,2) * ( 1.0/4.0 + 1.0/2.0*(x*x-1) )
    + (1.0/mzz)*(1.0/sqrt(2))*c4*m1*pow(m2,2) * ( 2*(x*x-1) )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*(1.0/m1)*pow(m2,4) * (  - 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m1,3) * (  - 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*(1.0/m1)*pow(m2,2) * (  - 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*m1 * ( 1.0/8.0 )

    + pow(mzz,3)*(1.0/sqrt(2))*c1*(1.0/m1) * ( 1.0/8.0 );

  Double_t f0mImag = 

    + 1*(1.0/pow(mzz,3))*(1.0/sqrt(2))*pow(m1,2)*pow(m2,3) * ( 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*pow(m2,3) * (  - sqrt(x*x-1.) )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*pow(m1,2)*m2 * ( sqrt(x*x-1.) )

    + 1*mzz*(1.0/sqrt(2))*c6*m2 * ( sqrt(x*x-1.) );

  //-----------------------------------------------------------------------

  Double_t fm0Real =
    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m2,5) * (  - 1.0/8.0 )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,2)*pow(m2,3) * ( 3.0/8.0 + 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,4)*m2 * (  - 3.0/8.0 - 1.0/2.0*(x*x-1) )

    + (1.0/pow(mzz,3))*(1.0/sqrt(2))*c1*pow(m1,6)*(1.0/m2) * ( 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m1,2)*m2 * ( 1.0/4.0 + 1.0/2.0*(x*x-1) )
    + (1.0/mzz)*(1.0/sqrt(2))*c4*pow(m1,2)*m2 * ( 2*(x*x-1) )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m2,3) * (  - 1.0/8.0 )

    + (1.0/mzz)*(1.0/sqrt(2))*c1*pow(m1,4)*(1.0/m2) * (  - 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*m2 * ( 1.0/8.0 )

    + mzz*(1.0/sqrt(2))*c1*pow(m1,2)*(1.0/m2) * (  - 1.0/8.0 )

    + pow(mzz,3)*(1.0/sqrt(2))*c1*(1.0/m2) * ( 1.0/8.0 );

  Double_t fm0Imag = 

    + 1*(1.0/pow(mzz,3))*(1.0/sqrt(2))*pow(m1,3)*pow(m2,2) * ( 4*pow(sqrt(x*x-1),3)*c7 )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*m1*pow(m2,2) * ( sqrt(x*x-1.) )

    + 1*(1.0/mzz)*(1.0/sqrt(2))*c6*pow(m1,3) * (  - sqrt(x*x-1.) )

    + 1*mzz*(1.0/sqrt(2))*c6*m1 * ( sqrt(x*x-1.) );

  //-----------------------------------------------------------------------
  Double_t fpmReal = 
    + pow(mzz,-2)*c1*pow(m1,4) * (  - 1.0/4.0 )
    + pow(mzz,-2)*c1*pow(m2,4) * (  - 1.0/4.0 )

    + pow(mzz,-2)*c1*pow(m1,2)*pow(m2,2) * ( 1.0/2.0 + (x*x-1) )

    + pow(mzz,2)*c1 * ( 1.0/4.0 );

  Double_t fpmImag = 0;

  //-----------------------------------------------------------------------

  Double_t fmpReal = 
    + pow(mzz,-2)*c1*pow(m2,4) * (  - 1.0/4.0 )
    + pow(mzz,-2)*c1*pow(m1,4) * (  - 1.0/4.0 )

    + pow(mzz,-2)*c1*pow(m1,2)*pow(m2,2) * ( 1.0/2.0 + (x*x-1) )

    + pow(mzz,2)*c1 * ( 1.0/4.0 );

  Double_t fmpImag = 0;

  //-----------------------------------------------------------------------
  Double_t f00 = f00Imag*f00Imag + f00Real*f00Real;
  Double_t fpp = fppImag*fppImag + fppReal*fppReal;
  Double_t fmm = fmmImag*fmmImag + fmmReal*fmmReal;
  Double_t fp0 = fp0Imag*fp0Imag + fp0Real*fp0Real;
  Double_t f0p = f0pImag*f0pImag + f0pReal*f0pReal;
  Double_t fm0 = fm0Imag*fm0Imag + fm0Real*fm0Real;
  Double_t f0m = f0mImag*f0mImag + f0mReal*f0mReal;
  Double_t fpm=  fpmImag*fpmImag + fpmReal*fpmReal;
  Double_t fmp = fmpImag*fmpImag + fmpReal*fmpReal;
  
  double norm = f00 + fpp + fmm + fp0 + f0p + fm0 + f0m + fpm + fmp; 
  f00 = f00 / norm;
  fpp = fpp / norm;
  fmm = fmm / norm;
  fp0 = fp0 / norm;
  f0p = f0p / norm;
  fm0 = fm0 / norm;
  f0m = f0m / norm;
  fpm = fpm / norm;
  fmp = fmp / norm;

  Double_t phi00=atan2(f00Imag,f00Real);
  Double_t phipp=atan2(fppImag,fppReal);
  Double_t phimm=atan2(fmmImag,fmmReal);
  Double_t phip0=atan2(fp0Imag,fp0Real);
  Double_t phi0p=atan2(f0pImag,f0pReal);
  Double_t phim0=atan2(fm0Imag,fm0Real);
  Double_t phi0m=atan2(f0mImag,f0mReal);
  Double_t phipm=atan2(fpmImag,fpmReal);
  Double_t phimp=atan2(fmpImag,fmpReal);

  /*
  // 
  // Set the value by hand
  // 

  fpp = 0.013;
  fmm = 0.013;
  fpm = 0.282;
  fmp = fpm;
  fp0 = 0.075;
  f0p = fp0;
  f0m = 0.075;
  fm0 = f0m;
  f00 = 1.-fpp-fmm-fpm-fmp-fp0-f0p-fm0-f0m;

  phi00 = 0.;
  phipp = 0.;
  phimm = 0.;
  phip0 = 0.;
  phi0p = 0.;
  phim0 = 0.;
  phi0m = 0.;
  phipm = 0.;
  phimp = 0.;

  std::cout << "----------------------------\n";
  std::cout << "f00 = " << f00 << "\n";
  std::cout << "fpp = " << fpp << "\n";
  std::cout << "fmm = " << fmm << "\n";
  std::cout << "fp0 = " << fp0 << "\n";
  std::cout << "f0p = " << f0p << "\n";
  std::cout << "fm0 = " << fm0 << "\n";
  std::cout << "f0m = " << f0m << "\n";
  std::cout << "fpm = " << fpm << "\n";
  std::cout << "fmp = " << fmp << "\n";
 
  std::cout << "phi00 = " << phi00 << "\n";
  std::cout << "phipp = " << phipp << "\n";
  std::cout << "phimm = " << phimm << "\n";
  std::cout << "phip0 = " << phip0 << "\n";
  std::cout << "phi0p = " << phi0p << "\n";
  std::cout << "phim0 = " << phim0 << "\n";
  std::cout << "phi0m = " << phi0m << "\n";
  std::cout << "phipm = " << phipm << "\n";
  std::cout << "phimp = " << phimp << "\n";
  std::cout << "----------------------------\n";
  */

  //-----------------------------------------------------------------------
  
  switch(code)
    {
      // integrate all angles
    case 6:
      {
  
	integral=0;

	integral+=
	  (32*f00*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*fmm*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*fpp*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*fp0*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*f0m*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*f0p*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*fm0*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*fpm*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;
	integral+=
	  (32*fmp*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2))/45.;

	return term1Coeff*term2Coeff*betaVal*integral;
      }
      // projections onto Phi1, integrate all other angles
    case 5:
      {

	integral=0;

	integral+=
	  (16*f00*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fmm*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fpp*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fp0*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*f0m*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*f0p*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fm0*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fpm*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fmp*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (-4*Sqrt(0.6666666666666666)*Sqrt(fmm)*Sqrt(fpm)*(2*(fz0Val + fz1Val) - 3*fz2Val)*Pi()*
	   Cos(2*Phi1 + phimm - phipm))/45.;
	integral+= 
	  (-4*Sqrt(0.6666666666666666)*Sqrt(fmp)*Sqrt(fpp)*(2*(fz0Val + fz1Val) - 3*fz2Val)*Pi()*
	   Cos(2*Phi1 + phimp - phipp))/45.; 
	integral+=
	  (-8*Sqrt(fm0)*Sqrt(fp0)*(6*fz0Val + fz1Val - 4*fz2Val)*Pi()*
	   Cos(2*Phi1 + phim0 - phip0))/135.;

	return term1Coeff*term2Coeff*betaVal*integral;

      }
      // projection to Phi, integrate all other angles
    case 4:
      {
	  
	integral=0;
	integral+=
	  (16*f00*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fmm*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fpp*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fp0*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*f0m*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*f0p*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fm0*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fpm*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (16*fmp*(fz0Val + fz1Val + fz2Val)*Pi())/45.;
	integral+=
	  (Sqrt(f00)*Sqrt(fmm)*(fz0Val + fz1Val + fz2Val)*Power(Pi(),3)*R1Val*R2Val*
	   Cos(Phi - phimm))/20.;
	integral+=
	  (Sqrt(f00)*Sqrt(fpp)*(fz0Val + fz1Val + fz2Val)*Power(Pi(),3)*R1Val*R2Val*
	   Cos(Phi + phipp))/20.;
	integral+=
	  (8*Sqrt(fmm)*Sqrt(fpp)*(fz0Val + fz1Val + fz2Val)*Pi()*
	   Cos(2*Phi - phimm + phipp))/45.;
	integral+=
	  (Sqrt(f0m)*Sqrt(fp0)*(fz0Val + fz1Val + fz2Val)*Power(Pi(),3)*R1Val*R2Val*
	   Cos(Phi - phi0m + phip0))/20.;
	integral+=
	  (Sqrt(f0p)*Sqrt(fm0)*(fz0Val + fz1Val + fz2Val)*Power(Pi(),3)*R1Val*R2Val*
	   Cos(Phi + phi0p - phim0))/20.;

	return term1Coeff*term2Coeff*betaVal*integral;

      }
      // projections to h2, integrate over all others
    case 3:
      {

	integral+=
	  (-8*f00*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + Power(h2,2)))/15.;
	integral+=
	  (4*fmm*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(1 + 2*R2Val*h2 + Power(h2,2)))/15.;
	integral+=
	  (-4*fpp*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + 2*R2Val*h2 - Power(h2,2)))/15.;
	integral+=
	  (-8*fp0*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + Power(h2,2)))/15.;
	integral+=
	  (4*f0m*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(1 + 2*R2Val*h2 + Power(h2,2)))/15.;
	integral+=
	  (-4*f0p*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + 2*R2Val*h2 - Power(h2,2)))/15.;
	integral+=
	  (-8*fm0*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + Power(h2,2)))/15.;
	integral+=
	  (4*fpm*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(1 + 2*R2Val*h2 + Power(h2,2)))/15.;
	integral+=
	  (-4*fmp*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + 2*R2Val*h2 - Power(h2,2)))/15.;

	return term1Coeff*term2Coeff*betaVal*integral;

      }
      // projections to h1, integrate all others
    case 2:
      {

	integral=0;

	integral+=
	  (-8*f00*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + Power(h1,2)))/15.;
	integral+=
	  (4*fmm*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(1 + 2*R1Val*h1 + Power(h1,2)))/15.;
	integral+=
	  (-4*fpp*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + 2*R1Val*h1 - Power(h1,2)))/15.;
	integral+=
	  (-4*fp0*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + 2*R1Val*h1 - Power(h1,2)))/15.;
	integral+=
	  (-8*f0m*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + Power(h1,2)))/15.;
	integral+=
	  (-8*f0p*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + Power(h1,2)))/15.;
	integral+=
	  (4*fm0*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(1 + 2*R1Val*h1 + Power(h1,2)))/15.;
	integral+=
	  (-4*fpm*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(-1 + 2*R1Val*h1 - Power(h1,2)))/15.;
	integral+=
	  (4*fmp*(fz0Val + fz1Val + fz2Val)*Power(Pi(),2)*(1 + 2*R1Val*h1 + Power(h1,2)))/15.;
	  
	return betaVal*term1Coeff*term2Coeff*integral;

      }
      // projections to hs, integrate all others
    case 1:
      {
	  
	integral=0;

	integral+=	  
	  (2*f00*Power(Pi(),2)*(2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
				3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (2*fmm*Power(Pi(),2)*(2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
				3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (2*fpp*Power(Pi(),2)*(2*fz0Val + 3*fz2Val - 6*(2*fz0Val - 2*fz1Val + fz2Val)*Power(hs,2) + 
				3*(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (4*fp0*Power(Pi(),2)*(fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
				(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (4*f0m*Power(Pi(),2)*(fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
				(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (4*f0p*Power(Pi(),2)*(fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
				(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (4*fm0*Power(Pi(),2)*(fz1Val + fz2Val - 3*(-2*fz0Val + fz1Val)*Power(hs,2) - 
				(6*fz0Val - 4*fz1Val + fz2Val)*Power(hs,4)))/9.;
	integral+=
	  (fpm*Power(Pi(),2)*(4*fz1Val + fz2Val + 6*fz2Val*Power(hs,2) + 
			      (-4*fz1Val + fz2Val)*Power(hs,4) + 6*fz0Val*Power(-1 + Power(hs,2),2)))/9.;
	integral+=
	  (fmp*Power(Pi(),2)*(4*fz1Val + fz2Val + 6*fz2Val*Power(hs,2) + 
			      (-4*fz1Val + fz2Val)*Power(hs,4) + 6*fz0Val*Power(-1 + Power(hs,2),2)))/9.;
	  
	return betaVal*term2Coeff*term1Coeff*integral;
      }

    }
  assert(0) ;
  return 0 ;
}

