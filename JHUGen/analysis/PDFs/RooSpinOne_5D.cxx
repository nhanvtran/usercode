 /***************************************************************************** 
  * Project: RooFit                                                           * 
  *                                                                           * 
  * This code was autogenerated by RooClassFactory                            * 
  *****************************************************************************/ 

 // Your description goes here... 

 #include "Riostream.h" 

 #include "RooSpinOne_5D.h" 
 #include "RooAbsReal.h" 
 #include "RooAbsCategory.h" 

 ClassImp(RooSpinOne_5D) 

 RooSpinOne_5D::RooSpinOne_5D(const char *name, const char *title, 
                        RooAbsReal& _h1,
                        RooAbsReal& _h2,
                        RooAbsReal& _hs,
                        RooAbsReal& _Phi,
                        RooAbsReal& _Phi1,
                        RooAbsReal& _fp0Val,
                        RooAbsReal& _phip0Val,
                        RooAbsReal& _phi0mVal,
                        RooAbsReal& _R1Val,
                        RooAbsReal& _R2Val,
                        RooAbsReal& _aParam) :
   RooAbsPdf(name,title), 
   h1("h1","h1",this,_h1),
   h2("h2","h2",this,_h2),
   hs("hs","hs",this,_hs),
   Phi("Phi","Phi",this,_Phi),
   Phi1("Phi1","Phi1",this,_Phi1),
   fp0Val("fp0Val","fp0Val",this,_fp0Val),
   phip0Val("phip0Val","phip0Val",this,_phip0Val),
   phi0mVal("phi0mVal","phi0mVal",this,_phi0mVal),
   R1Val("R1Val","R1Val",this,_R1Val),
   R2Val("R2Val","R2Val",this,_R2Val),
aParam("aParam","aParam",this,_aParam)
 { 
 } 


 RooSpinOne_5D::RooSpinOne_5D(const RooSpinOne_5D& other, const char* name) :  
   RooAbsPdf(other,name), 
   h1("h1",this,other.h1),
   h2("h2",this,other.h2),
   hs("hs",this,other.hs),
   Phi("Phi",this,other.Phi),
   Phi1("Phi1",this,other.Phi1),
   fp0Val("fp0Val",this,other.fp0Val),
   phip0Val("phip0Val",this,other.phip0Val),
   phi0mVal("phi0mVal",this,other.phi0mVal),
   R1Val("R1Val",this,other.R1Val),
   R2Val("R2Val",this,other.R2Val),
   aParam("aParam",this,other.aParam)
 { 
 } 



 Double_t RooSpinOne_5D::evaluate() const 
 { 
	 Double_t shs = sqrt(1-hs*hs);
	 Double_t sh1 = sqrt(1-h1*h1);
	 Double_t sh2 = sqrt(1-h2*h2);

	 Double_t term1 = (1.+pow(hs,2))*(1.-h1*h1*h2*h2+(1-4.*fp0Val)*(R1Val*h1*pow(sh2,2)+R2Val*h2*pow(sh1,2)));
	 Double_t term2 = aParam*-shs*shs*sh1*sh2*cos(Phi+2.*Phi1)*((1-4.*fp0Val)*(R1Val*h2+R2Val*h1)+R1Val*R2Val+h1*h2);
	 Double_t term3coeff = sqrt(8.*fp0Val*(1.-2.*fp0Val))*cos(Phi+phip0Val-phi0mVal);
	 //Double_t term3 = (1.+hs*hs)*sh1*sh2*(R1Val*R2Val-h1*h2)+sh1*sh1*sh2*sh2*shs*shs*cos(Phi+2.*Phi1);
	 // a fix
	 Double_t term3 = (1.+hs*hs)*sh1*sh2*(R1Val*R2Val-h1*h2)-sh1*sh1*sh2*sh2*shs*shs*cos(Phi+2.*Phi1);
	 
	 Double_t sum = term1+term2+term3coeff*term3;
	 
	 return sum ; 
 } 

Int_t RooSpinOne_5D::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const
{
	
	if (matchArgs(allVars,analVars,hs,Phi,Phi1)) return 2 ;
	if (matchArgs(allVars,analVars,h1,h2,Phi)) return 4 ;
	if (matchArgs(allVars,analVars,h1,h2,Phi1)) return 6 ;
	return 0 ;
}

Double_t RooSpinOne_5D::analyticalIntegral(Int_t code, const char* rangeName) const
{
	switch(code)
    {
		case 2:
		{
			
			Double_t sh1 = sqrt(1-h1*h1);
			Double_t sh2 = sqrt(1-h2*h2);
			Double_t PIVal = 3.14159265;
			
			Double_t norm = (32./3.)*PIVal*PIVal;
			Double_t term = 1 + (1.-4*fp0Val)*(R1Val*h1*sh2*sh2 + R2Val*h2*sh1*sh1) - h1*h1*h2*h2;
			
			return (norm*term);
		}
		case 4:
		{
			Double_t shs = sqrt(1-hs*hs);
			Double_t PIVal = 3.14159265;
			
			Double_t norm = (32./9.)*PIVal;
			Double_t term = 2.*(1.+hs*hs)-sqrt(2.*fp0Val*(1.-2.*fp0Val))*pow(shs,2)*cos(2.*Phi1-phip0Val+phi0mVal);
			
			return (norm*term);
		}
		case 6:
		{
			Double_t PIVal = 3.14159265;

			Double_t norm = (1./9.)*PIVal*(1+pow(hs,2));
			Double_t term = 64.+9.*sqrt(fp0Val*(2.-4.*fp0Val))*PIVal*PIVal*R1Val*R2Val*cos(Phi+phip0Val-phi0mVal);
			
			return (norm*term);
		}
    }
	
	assert(0) ;
	return 0 ;
}


