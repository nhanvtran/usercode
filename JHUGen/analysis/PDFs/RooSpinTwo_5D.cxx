/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooSpinTwo_5D.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 

ClassImp(RooSpinTwo_5D) 

RooSpinTwo_5D::RooSpinTwo_5D(const char *name, const char *title, 
							 RooAbsReal& _h1,
							 RooAbsReal& _h2,
							 RooAbsReal& _hs,
							 RooAbsReal& _Phi,
							 RooAbsReal& _Phi1,
							 RooAbsReal& _fppVal,
							 RooAbsReal& _fmmVal,
							 RooAbsReal& _fpmVal,
							 RooAbsReal& _fp0Val,
							 RooAbsReal& _f0mVal,
							 RooAbsReal& _phippVal,
							 RooAbsReal& _phimmVal,
							 RooAbsReal& _phipmVal,
							 RooAbsReal& _phip0Val,
							 RooAbsReal& _phi0mVal,
							 RooAbsReal& _fz1Val,
							 RooAbsReal& _fz2Val,
							 RooAbsReal& _R1Val,
							 RooAbsReal& _R2Val,
							 RooAbsReal& _para2,
							 RooAbsReal& _para4,
							 RooAbsReal& _para6,
							 RooAbsReal& _para8,
							 RooAbsReal& _acca0,
							 RooAbsReal& _acca1,
							 RooAbsReal& _acca2,
							 RooAbsReal& _acca4) :
RooAbsPdf(name,title), 
h1("h1","h1",this,_h1),
h2("h2","h2",this,_h2),
hs("hs","hs",this,_hs),
Phi("Phi","Phi",this,_Phi),
Phi1("Phi1","Phi1",this,_Phi1),
fppVal("fppVal","fppVal",this,_fppVal),
fmmVal("fmmVal","fmmVal",this,_fmmVal),
fpmVal("fpmVal","fpmVal",this,_fpmVal),
fp0Val("fp0Val","fp0Val",this,_fp0Val),
f0mVal("f0mVal","f0mVal",this,_f0mVal),
phippVal("phippVal","phippVal",this,_phippVal),
phimmVal("phimmVal","phimmVal",this,_phimmVal),
phipmVal("phipmVal","phipmVal",this,_phipmVal),
phip0Val("phip0Val","phip0Val",this,_phip0Val),
phi0mVal("phi0mVal","phi0mVal",this,_phi0mVal),
fz1Val("fz1Val","fz1Val",this,_fz1Val),
fz2Val("fz2Val","fz2Val",this,_fz2Val),
R1Val("R1Val","R1Val",this,_R1Val),
R2Val("R2Val","R2Val",this,_R2Val),
para2("para2","para2",this,_para2),
para4("para4","para4",this,_para4),
para6("para6","para6",this,_para6),
para8("para8","para8",this,_para8),
acca0("acca0","acca0",this,_acca0),
acca1("acca1","acca1",this,_acca1),
acca2("acca2","acca2",this,_acca2),
acca4("acca4","acca4",this,_acca4)
{ 
} 


RooSpinTwo_5D::RooSpinTwo_5D(const RooSpinTwo_5D& other, const char* name) :  
RooAbsPdf(other,name), 
h1("h1",this,other.h1),
h2("h2",this,other.h2),
hs("hs",this,other.hs),
Phi("Phi",this,other.Phi),
Phi1("Phi1",this,other.Phi1),
fppVal("fppVal",this,other.fppVal),
fmmVal("fmmVal",this,other.fmmVal),
fpmVal("fpmVal",this,other.fpmVal),
fp0Val("fp0Val",this,other.fp0Val),
f0mVal("f0mVal",this,other.f0mVal),
phippVal("phippVal",this,other.phippVal),
phimmVal("phimmVal",this,other.phimmVal),
phipmVal("phipmVal",this,other.phipmVal),
phip0Val("phip0Val",this,other.phip0Val),
phi0mVal("phi0mVal",this,other.phi0mVal),
fz1Val("fz1Val",this,other.fz1Val),
fz2Val("fz2Val",this,other.fz2Val),
R1Val("R1Val",this,other.R1Val),
R2Val("R2Val",this,other.R2Val),
para2("para2",this,other.para2),
para4("para4",this,other.para4),
para6("para6",this,other.para6),
para8("para8",this,other.para8),
acca0("acca0",this,other.acca0),
acca1("acca1",this,other.acca1),
acca2("acca2",this,other.acca2),
acca4("acca4",this,other.acca4)
{ 
} 



Double_t RooSpinTwo_5D::evaluate() const 
{ 
	
	Double_t shs = sqrt(1-hs*hs);
	Double_t sh1 = sqrt(1-h1*h1);
	Double_t sh2 = sqrt(1-h2*h2);
	
	if ((1.-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal) < 0) return 1e-9;
	
	Double_t term1Coeff = (2.-2.*fz1Val+fz2Val-6.*(2.-4.*fz1Val-fz2Val)*pow(hs,2)+3.*(6.-10.*fz1Val-5.*fz2Val)*pow(hs,4));
	Double_t term1A = 4.*(1.-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal)*pow(sh1,2)*pow(sh2,2);
	Double_t term1B = (fppVal+fmmVal)*((1.+h1*h1)*(1.+h2*h2)+4.*R1Val*R2Val*h1*h2);
	Double_t term1C = -2.*(fppVal-fmmVal)*(R1Val*h1*(1.+h2*h2)+R2Val*h2*(1.+h1*h1));
	Double_t term1D = 4.*sqrt(fppVal*(1-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal))*(R1Val-h1)*(R2Val-h2)*sh1*sh2*cos(Phi+phippVal);
	Double_t term1E = 4.*sqrt(fmmVal*(1-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal))*(R1Val+h1)*(R2Val+h2)*sh1*sh2*cos(Phi-phimmVal);
	Double_t term1F = 2.*sqrt(fppVal*fmmVal)*pow(sh1,2)*pow(sh2,2)*cos(2.*Phi+phippVal-phimmVal);
	Double_t term1 = term1Coeff*(term1A+term1B+term1C+term1D+term1E+term1F);
	
	Double_t term2Coeff = 8.*(fz1Val+fz2Val+3.*(2.-3.*fz1Val-2.*fz2Val)*pow(hs,2)-(6.-10.*fz1Val-5.*fz2Val)*pow(hs,4));
	Double_t term2A = (fp0Val+f0mVal)*(1.-h1*h1*h2*h2) - (fp0Val-f0mVal)*(R1Val*h1*pow(sh2,2)+R2Val*h2*pow(sh1,2));
	Double_t term2B = 2.*sqrt(fp0Val*f0mVal)*sh1*sh2*(R1Val*R2Val-h1*h2)*cos(Phi+phip0Val-phi0mVal);
	Double_t term2 = term2Coeff*(term2A+term2B);
	
	Double_t term3Coeff = -8.*(fz1Val-fz2Val+(6.-10.*fz1Val-5.*fz2Val)*pow(hs,2))*pow(shs,2)*sh1*sh2*cos(Phi + 2.*Phi1);
	Double_t term3A = (fp0Val+f0mVal)*(R1Val*R2Val+h1*h2)-(fp0Val-f0mVal)*(R1Val*h2+R2Val*h1)+2.*sqrt(fp0Val*f0mVal)*sh1*sh2*cos(Phi+phip0Val-phi0mVal);
	Double_t term3 = term3Coeff*term3A;
	
	Double_t term4Coeff = 6.-2.*fz1Val-5.*fz2Val-6.*(2.-2.*fz1Val-3.*fz2Val)*pow(hs,2)+(6.-10.*fz1Val-5.*fz2Val)*pow(hs,4);
	Double_t term4A = fpmVal*((1.+h1*h1)*(1.+h2*h2)-4.*R1Val*R2Val*h1*h2);
	Double_t term4 = term4Coeff*term4A;
	
	Double_t term5 = pow(shs,4)*(6.-10.*fz1Val-5.*fz2Val)*fpmVal*pow(sh1,2)*pow(sh2,2)*cos(2.*Phi+4.*Phi1);
	
	Double_t term6Coeff = (-1.)*sqrt(6.)*(2.-2.*fz1Val-3.*fz2Val-(6.-10.*fz1Val-5.*fz2Val)*pow(hs,2))*pow(shs,2);
	Double_t term6A = 2.*sqrt(fpmVal*(1.-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal))*sh1*sh2*((R1Val-h1)*(R2Val+h2)*cos(Phi+2.*Phi1-phipmVal)+(R1Val+h1)*(R2Val-h2)*cos(Phi+2.*Phi1+phipmVal));
	Double_t term6B = sqrt(fpmVal*fmmVal)*(sh1*sh1*(1.+2.*R2Val*h2+h2*h2)*cos(2.*Phi1-phipmVal+phimmVal)+sh2*sh2*(1.+2.*R1Val*h1+h1*h1)*cos(2.*Phi+2.*Phi1+phipmVal-phimmVal));
	Double_t term6C = sqrt(fppVal*fpmVal)*(sh1*sh1*(1.-2.*R2Val*h2+h2*h2)*cos(2.*Phi1+phipmVal-phippVal)+sh2*sh2*(1.-2.*R1Val*h1+h1*h1)*cos(2.*Phi+2.*Phi1-phipmVal+phippVal));
	Double_t term6 = term6Coeff*(term6A+term6B+term6C);
	
	/// new mixing terms
	Double_t term7Coeff = -4.*sqrt(3.)*(2.-4.*fz1Val-fz2Val-(6.-10.*fz1Val-5.*fz2Val)*pow(hs,2))*hs*shs;
	Double_t term7A = sqrt(fmmVal*f0mVal)*(sh1*(R1Val+h1)*(1.+2.*R2Val*h2+h2*h2)*cos(Phi1+phimmVal-phi0mVal)-sh2*(R2Val+h2)*(1.+2.*R1Val*h1+h1*h1)*cos(Phi+Phi1-phimmVal+phi0mVal));
	Double_t term7B = sqrt(fmmVal*fp0Val)*(sh1*sh1*sh2*(R2Val+h2)*cos(Phi-Phi1-phimmVal+phip0Val)-sh2*sh2*sh1*(R1Val+h1)*cos(2.*Phi+Phi1-phimmVal+phip0Val));
	Double_t term7C = -sqrt(fppVal*f0mVal)*(sh1*sh1*sh2*(R2Val-h2)*cos(Phi-Phi1+phippVal-phi0mVal)-sh2*sh2*sh1*(R1Val-h1)*cos(2.*Phi+Phi1+phippVal-phi0mVal));
	Double_t term7D = -sqrt(fppVal*fp0Val)*(sh1*(R1Val-h1)*(1.-2.*R2Val*h2+h2*h2)*cos(Phi1+phip0Val-phippVal)-sh2*(R2Val-h2)*(1.-2.*R1Val*h1+h1*h1)*cos(Phi+Phi1+phippVal-phip0Val));
	Double_t term7E = -2.*sqrt(f0mVal*(1.-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal))*(sh1*sh2*sh2*(R1Val+h1)*cos(Phi1+phi0mVal)-sh2*sh1*sh1*(R2Val+h2)*cos(Phi+Phi1-phi0mVal));
	Double_t term7F = 2.*sqrt(fp0Val*(1.-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal))*(sh1*sh2*sh2*(R1Val-h1)*cos(Phi1-phip0Val)-sh2*sh1*sh1*(R2Val-h2)*cos(Phi+Phi1+phip0Val));
	Double_t term7 = term7Coeff*(term7A+term7B+term7C+term7D+term7E+term7F);
	
	Double_t term8Coeff = 2.*sqrt(2.)*hs*shs*(6.-6.*fz1Val-9.*fz2Val-(6.-10.*fz1Val-5.*fz2Val)*pow(hs,2));
	Double_t term8A = sqrt(fpmVal*f0mVal)*(sh1*(R1Val-h1)*(1.+2.*R2Val*h2+h2*h2)*cos(Phi1-phipmVal+phi0mVal)-sh2*(R2Val-h2)*(1.+2.*R1Val*h1+h1*h1)*cos(Phi+Phi1+phipmVal-phi0mVal));
	Double_t term8B = sqrt(fpmVal*fp0Val)*(sh2*(R2Val+h2)*(1.-2.*R1Val*h1+h1*h1)*cos(Phi+Phi1-phipmVal+phip0Val)-sh1*(R1Val+h1)*(1.-2.*R2Val*h2+h2*h2)*cos(Phi1+phipmVal-phip0Val));
	Double_t term8 = term8Coeff*(term8A+term8B);
	
	Double_t term9Coeff = -2.*sqrt(2.)*hs*pow(shs,3)*(6.-10.*fz1Val-5.*fz2Val);
	Double_t term9A = sqrt(fpmVal*f0mVal)*(sh1*sh1*sh2*(R2Val+h2)*cos(Phi+3.*Phi1-phipmVal+phi0mVal)-sh2*sh2*sh1*(R1Val+h1)*cos(2.*Phi+3.*Phi1+phipmVal-phi0mVal));
	Double_t term9B = sqrt(fpmVal*fp0Val)*(sh1*sh2*sh2*(R1Val-h1)*cos(2.*Phi+3.*Phi1-phipmVal+phip0Val)-sh2*sh1*sh1*(R2Val-h2)*cos(Phi+3.*Phi1+phipmVal-phip0Val));
	Double_t term9 = term9Coeff*(term9A+term9B);
	
	// signs of the interference terms are flipped!!!!
	if (true){
		term7 *= (-1.);
		term8 *= (-1.);
		term9 *= (-1.);
	}
	
	Double_t sum = term1+term2+term3+term4+term5+term6+term7+term8+term9;
	//Double_t sum = term1+term2+term3+term4+term5+term6;
	
	/*
	 std::cout << "-----------------------------" << std::endl;
	 std::cout << "fp0: " << fp0Val << ", f0m: " << f0mVal << ", fpp: " << fppVal << ", fmm: " << fmmVal << ", fpm: " << fpmVal << std::endl;
	 std::cout << "h1: " << h1 << ", h2: " << h2 << ", hs: " << hs << ", Phi: " << Phi << ", Phi1: " << Phi1 << std::endl;
	 std::cout << "term1: " << term1 << std::endl;
	 std::cout << "term2: " << term2 << std::endl;
	 std::cout << "term3: " << term3 << std::endl;	
	 std::cout << "term4: " << term4 << std::endl;
	 std::cout << "term5: " << term5 << std::endl;
	 std::cout << "term6: " << term6 << std::endl;
	 std::cout << "term7: " << term7 << std::endl;
	 std::cout << "term7Coeff: " << term7Coeff << ", term7A: " << term7A << ", term7B: " << term7B << ", term7C: " << term7C << ", term7D: " << term7D << ", term7E: " << term7E << ", term7F: " << term7F << std::endl;
	 std::cout << "term8: " << term8 << std::endl;
	 std::cout << "term8Coeff: " << term8Coeff << ", term8A: " << term8A << ", term8B: " << term8B << std::endl;
	 std::cout << "term9: " << term9 << std::endl;
	 std::cout << "term9Coeff: " << term9Coeff << ", term9A: " << term9A << ", term9B: " << term9B << std::endl;
	 std::cout << "sum: " << sum << std::endl;
	 //*/
	Double_t accp = (1.0+para2*pow(hs,2)+para4*pow(hs,4)+para6*pow(hs,6)+para8*pow(hs,8))
	*(acca0+acca1*cos(Phi1)+acca2*cos(2.0*Phi1)+acca4*cos(4.0*Phi1));
	
	return (sum*accp) ; 
	
} 

Int_t RooSpinTwo_5D::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const
{
	/*
	 if (matchArgs(allVars,analVars,h1,h2,Phi,hs)) return 3 ;
	 if (matchArgs(allVars,analVars,h1,h2,Phi1,hs)) return 4 ;
	 if (matchArgs(allVars,analVars,Phi,h2,Phi1,hs)) return 5 ;
	 if (matchArgs(allVars,analVars,Phi1,h1,h2,Phi)) return 6 ;
	 if (matchArgs(allVars,analVars,h1,Phi,Phi1,hs)) return 7 ;
	 ///*/
	///*
	//if (matchArgs(allVars,analVars,Phi1,hs,Phi)) return 8 ;
	if (matchArgs(allVars,analVars,Phi,h1,h2)) return 9 ;
	if (matchArgs(allVars,analVars,h1,h2,hs)) return 10 ;
	if (matchArgs(allVars,analVars,Phi,h1,hs)) return 11 ;
	if (matchArgs(allVars,analVars,Phi,h2,hs)) return 12 ;
	//*/
	return 0 ;
}

Double_t RooSpinTwo_5D::analyticalIntegral(Int_t code, const char* rangeName) const
{
	bool printIn = false;
	double f00Val = (1.-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal);
	switch(code)
    {
			/*
			 // ----------------------------------------------------------------------
			 case 3:
			 {
			 
			 
			 Double_t PIVal = 3.14159265;
			 
			 Double_t norm = (512./135.)*PIVal;
			 Double_t term1 = 12.-2.*sqrt(f0mVal*fp0Val)*(6.-5.*fz1Val-10.*fz2Val)*cos(2.*Phi1-phip0Val+phi0mVal)-sqrt(6.*fpmVal)*(2.-5.*fz2Val)*(sqrt(fmmVal)*cos(2.*Phi1+phimmVal-phipmVal)+sqrt(fppVal)*cos(2.*Phi1+phipmVal-phippVal));
			 
			 if(false) 
			 {
			 std::cout << "In case 3!" << std::endl;
			 std::cout << "fp0: " << fp0Val << ", f0m: " << f0mVal << ", fpp: " << fppVal << ", fmm: " << fmmVal << ", fpm: " << fpmVal << std::endl;
			 std::cout << "h1: " << h1 << ", h2: " << h2 << ", hs: " << hs << ", Phi: " << Phi << ", Phi1: " << Phi1 << std::endl;
			 std::cout << "norm: " << norm << ", term1: " << term1 << ", return: " << (norm*term1) << std::endl;
			 }
			 
			 return (norm*term1);
			 }
			 // ----------------------------------------------------------------------		
			 case 4:
			 {
			 
			 Double_t PIVal = 3.14159265;
			 
			 Double_t norm = (32./45.)*PIVal;
			 Double_t termA = 64.+9.*sqrt(fmmVal)*sqrt(1.-2.*f0mVal-2.*fp0Val-2*fpmVal-fmmVal-fppVal)*PIVal*PIVal*R1Val*R2Val*cos(Phi-phimmVal);
			 Double_t termB = 9.*sqrt(fppVal)*sqrt(1.-2.*f0mVal-2.*fp0Val-2*fpmVal-fmmVal-fppVal)*PIVal*PIVal*R1Val*R2Val*cos(Phi+phippVal);
			 Double_t termC = 18.*sqrt(fp0Val)*sqrt(f0mVal)*PIVal*PIVal*R1Val*R2Val*cos(Phi-phi0mVal+phip0Val);
			 Double_t termD = 32.*sqrt(fmmVal)*sqrt(fppVal)*cos(2.*Phi-phimmVal+phippVal);
			 
			 Double_t total = norm*(termA+termB+termC+termD);
			 
			 if(printIn) 
			 {
			 std::cout << "In case 4!" << std::endl;
			 std::cout << "fp0: " << fp0Val << ", f0m: " << f0mVal << ", fpp: " << fppVal << ", fmm: " << fmmVal << ", fpm: " << fpmVal << std::endl;
			 std::cout << "h1: " << h1 << ", h2: " << h2 << ", hs: " << hs << ", Phi: " << Phi << ", Phi1: " << Phi1 << std::endl;
			 std::cout << "norm: " << norm << ", termA: " << termA << ", termB: " << termB << ", termC: " << termC << ", termD: " << termD << ", return: " << (total) << std::endl;
			 }
			 
			 
			 return (total);
			 }
			 // ----------------------------------------------------------------------
			 case 5:
			 {
			 
			 Double_t PIVal = 3.14159265;
			 
			 Double_t norm = (512./15.)*PIVal*PIVal;
			 Double_t term = 2.-f0mVal-fmmVal-fp0Val-2.*fpmVal-fppVal+2.*(f0mVal+fmmVal-fp0Val-fppVal)*R1Val*h1+h1*h1*(-2.+3.*f0mVal+3.*fmmVal+3.*fp0Val+6.*fpmVal+3.*fppVal);
			 
			 if(printIn) 
			 {
			 std::cout << "In case 5!" << std::endl;
			 std::cout << "fp0: " << fp0Val << ", f0m: " << f0mVal << ", fpp: " << fppVal << ", fmm: " << fmmVal << ", fpm: " << fpmVal << std::endl;
			 std::cout << "h1: " << h1 << ", h2: " << h2 << ", hs: " << hs << ", Phi: " << Phi << ", Phi1: " << Phi1 << std::endl;
			 std::cout << "norm: " << norm << ", term: " << term << ", return: " << (norm*term) << std::endl;
			 }
			 
			 return (norm*term);
			 
			 }
			 // ----------------------------------------------------------------------
			 case 6:
			 {
			 if(printIn) std::cout << "In case 6!" << std::endl;
			 
			 //Double_t shs = sqrt(1-hs*hs);
			 Double_t PIVal = 3.14159265;
			 
			 Double_t norm = (256./9.)*PIVal*PIVal;
			 Double_t termA = 2.-4.*f0mVal-4.*fp0Val+2.*fpmVal-fz1Val*(2.-8.*f0mVal-8.*fp0Val-2.*fpmVal)+fz2Val*(1.+2.*f0mVal+2.*fp0Val-7.*fpmVal);
			 Double_t termB = -6.*hs*hs*(2.*(1.-4.*f0mVal-4.*fp0Val-fpmVal)-2.*fz1Val*(2.-7.*f0mVal-7.*fp0Val-3.*fpmVal)-fz2Val*(1.-6.*f0mVal-6.*fp0Val+fpmVal));
			 Double_t termC = pow(hs,4)*(3.-10.*f0mVal-10.*fp0Val-5.*fpmVal)*(6.-10.*fz1Val-5.*fz2Val);
			 
			 Double_t total = norm*(termA+termB+termC);
			 
			 if(printIn) 
			 {
			 std::cout << "In case 6!" << std::endl;
			 std::cout << "fp0: " << fp0Val << ", f0m: " << f0mVal << ", fpp: " << fppVal << ", fmm: " << fmmVal << ", fpm: " << fpmVal << std::endl;
			 std::cout << "h1: " << h1 << ", h2: " << h2 << ", hs: " << hs << ", Phi: " << Phi << ", Phi1: " << Phi1 << std::endl;
			 std::cout << "norm: " << norm << ", termA: " << termA << ", termB: " << termB << ", termC: " << termC << ", return: " << (total) << std::endl;
			 }
			 
			 return (total);
			 }
			 // ----------------------------------------------------------------------
			 case 7:
			 {
			 if(printIn) std::cout << "In case 7!" << std::endl;
			 
			 Double_t PIVal = 3.14159265;
			 
			 Double_t norm = (512./15.)*PIVal*PIVal;
			 Double_t term = 2.-f0mVal-fmmVal-fp0Val-2.*fpmVal-fppVal+2.*(f0mVal+fmmVal-fp0Val-fppVal)*R2Val*h2+h2*h2*(-2.+3.*f0mVal+3.*fmmVal+3.*fp0Val+6.*fpmVal+3.*fppVal);
			 
			 if(printIn) 
			 {
			 std::cout << "In case 7!" << std::endl;
			 std::cout << "fp0: " << fp0Val << ", f0m: " << f0mVal << ", fpp: " << fppVal << ", fmm: " << fmmVal << ", fpm: " << fpmVal << std::endl;
			 std::cout << "h1: " << h1 << ", h2: " << h2 << ", hs: " << hs << ", Phi: " << Phi << ", Phi1: " << Phi1 << std::endl;
			 std::cout << "norm: " << norm << ", term: " << term << ", return: " << (norm*term) << std::endl;
			 }
			 
			 return (norm*term);
			 
			 }
			 //*/
			/*
			 case 8:
			 {
			 //if(printIn) std::cout << "In case 8!" << std::endl;
			 
			 Double_t sh1 = sqrt(1-h1*h1);
			 Double_t sh2 = sqrt(1-h2*h2);
			 Double_t PIVal = 3.14159265;
			 
			 Double_t norm = (64./5.)*PIVal*PIVal;
			 Double_t termA = 2.*fpmVal*((1.+h1*h1)*(1.+h2*h2)-4.*R1Val*R2Val*h1*h2);
			 Double_t termB = 2.*(2.*(fp0Val+f0mVal)*(1.-h1*h1*h2*h2)-2.*(fp0Val-f0mVal)*(R1Val*h1*pow(sh2,2)+R2Val*h2*pow(sh1,2)));
			 Double_t termC = 4.*(1.-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal)*pow(sh1,2)*pow(sh2,2);
			 Double_t termD = (fppVal+fmmVal)*((1.+h1*h1)*(1.+h2*h2)+4.*R1Val*R2Val*h1*h2);
			 Double_t termE = 2.*(fppVal-fmmVal)*(R2Val*h2*(1.+h1*h1)+R1Val*h1*(1.+h2*h2));
			 
			 Double_t total = norm*(termA+termB+termC+termD+termE);
			 
			 return (total);
			 }
			 //*/

		///*
		 case 10:
		{
			if(printIn) std::cout << "In case 9!" << std::endl;
			
			Double_t PIVal = 3.14159265;
			
			Double_t norm = (8./405405.)*(acca0+acca1*cos(Phi1)+acca2*cos(2.0*Phi1)+acca4*cos(4.0*Phi1));
			
			Double_t term1 = -2.*(429.*(-21.+(-11.+2.*fz1Val+8.*fz2Val)*para2+(-9.+4.*fz1Val+8.*fz2Val)*para4)+195.*(-17.+10.*fz1Val+16.*fz2Val)*para6+35.*(-83.+56.*fz1Val+80.*fz2Val)*para8)*(64.*(f00Val+fmmVal+fppVal)+9.*sqrt(fmmVal)*sqrt(f00Val)*PIVal*PIVal*R1Val*R2Val*cos(Phi-phimmVal)+sqrt(fppVal)*(9.*sqrt(f00Val)*PIVal*PIVal*R1Val*R2Val*cos(Phi+phippVal)+32.*sqrt(fmmVal)*cos(2*Phi-phimmVal+phippVal)));
			Double_t term2 = 4.*(9009.-429.*(-9.+fz1Val+4.*fz2Val)*para2+143.*(15.+2.*fz1Val-8.*fz2Val)*para4+195.*(7.+3.*fz1Val-4.*fz2Val)*para6+35.*(27.+20.*fz1Val-16.*fz2Val)*para8)*(64.*(f0mVal+fp0Val)+9.*sqrt(f0mVal)*sqrt(fp0Val)*PIVal*PIVal*R1Val*R2Val*cos(Phi-phi0mVal+phip0Val));
			Double_t term3 = (143.*(-6.*(21.+9.*para2+5.*para4)+fz2Val*(210.+66.*para2+34.*para4)+fz1Val*(105.*+69.*para2+41.*para4))+65.*(-42.+59.*fz1Val+46.*fz2Val)*para6+35.*(-54.+77.*fz1Val+58.*fz2Val)*para8)*cos(Phi+2.*Phi1)*(9.*(f0mVal+fp0Val)*PIVal*PIVal*R1Val*R2Val+128.*sqrt(f0mVal)*sqrt(fp0Val)*cos(Phi-phi0mVal+phip0Val));
			Double_t term4 = 256.*fpmVal*(143.*(63.+3.*(3.+2.*fz1Val+8.*fz2Val)*para2+(3.+4.*fz1Val+20.*fz2Val)*para4)+195.*(1.+2.*fz1Val+12.*fz2Val)*para6+35.*(3.+8.*fz1Val+56.*fz2Val)*para8);
			Double_t term5 = -32.*fpmVal*(-6.+10.*fz1Val+5.*fz2Val)*(3003.+429.*para2+143.*para4+65.*para6+35.*para8)*cos(2.*(Phi+2.*Phi1));
			Double_t term6 = (3.)*sqrt(2./3.)*sqrt(fpmVal)*(143.*(-42.+(6.-24.*fz1Val)*para2+6.*para4-16.*fz1Val*para4+fz2Val*(105.+9.*para2+para4))-65.*(-10.+24.*fz1Val+fz2Val)*para6-35.*(-14.+32.*fz1Val+3.*fz2Val)*para8)*cos(Phi+2.*Phi1)*(9.*sqrt(f00Val)*PIVal*PIVal*R1Val*R2Val*cos(phipmVal)+ 64.*(sqrt(fmmVal)*cos(Phi-phimmVal+phipmVal)+sqrt(fppVal)*cos(Phi-phipmVal+phippVal)));

			
			Double_t total = norm*(term1+term2+term3+term4+term5+term6);
			
			return total;
		}		
		 //*/
		case 9:
		{
			if(printIn) std::cout << "In case 10!" << std::endl;

			Double_t shs = sqrt(1-hs*hs);
			Double_t PIVal = 3.14159265;
			
			Double_t norm = (64./9.)*PIVal;
			Double_t termA = 2.*fpmVal*(6.-2.*fz1Val-5.*fz2Val-6.*(2.-2.*fz1Val-3.*fz2Val)*pow(hs,2)+(6.-10.*fz1Val-5.*fz2Val)*pow(hs,4));
			Double_t termB = 8.*(fp0Val+f0mVal)*(fz1Val+fz2Val+3.*(2.-3.*fz1Val-2.*fz2Val)*pow(hs,2)-(6.-10.*fz1Val-5.*fz2Val)*pow(hs,4));
			Double_t termC = 2.*(1.-2.*f0mVal-2.*fp0Val-2.*fpmVal)*(2.-2.*fz1Val+fz2Val-6.*(2.-4.*fz1Val-fz2Val)*pow(hs,2)+3.*(6.-10.*fz1Val-5.*fz2Val)*pow(hs,4));
			Double_t termD = -4.*sqrt(fp0Val*f0mVal)*(fz1Val-fz2Val+(6.-10.*fz1Val-5.*fz2Val)*pow(hs,2))*pow(shs,2)*cos(2.*Phi1-phip0Val+phi0mVal);
			Double_t termE = (-1.)*sqrt(6.)*sqrt(fpmVal)*pow(shs,2)*(2.-2.*fz1Val-3.*fz2Val-(6.-10.*fz1Val-5.*fz2Val)*pow(hs,2))*(sqrt(fmmVal)*cos(2.*Phi1+phimmVal-phipmVal)+sqrt(fppVal)*cos(2.*Phi1-phippVal+phipmVal));
			
			Double_t norm2 = (16./3.)*PIVal*PIVal*R1Val*hs*shs;
			Double_t term2ACoeff = sqrt(2.)*sqrt(fpmVal)*(6.-6.*fz1Val-9.*fz2Val-(6.-10.*fz1Val-5.*fz2Val)*pow(hs,2));
			Double_t term2A = sqrt(f0mVal)*cos(Phi1+phi0mVal-phipmVal)-sqrt(fp0Val)*cos(Phi1+phipmVal-phip0Val);
			Double_t term2BCoeff = 2.*sqrt(3.)*(2.-4.*fz1Val-fz2Val-(6.-10.*fz1Val-5.*fz2Val)*pow(hs,2));
			Double_t term2B1 = sqrt((1.-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal)*f0mVal)*cos(-Phi1-phi0mVal)-sqrt((1.-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal)*fp0Val)*cos(Phi1-phip0Val);
			Double_t term2B2 = -sqrt(f0mVal*fmmVal)*cos(-Phi1-phimmVal+phi0mVal)+sqrt(fppVal*fp0Val)*cos(Phi1+phip0Val-phippVal);
 			
			Double_t total1 = norm*(termA+termB+termC+termD+termE);
			Double_t total2 = norm2*(term2ACoeff*term2A + term2BCoeff*(term2B1+term2B2));
			
			// signs of the interference terms are flipped!!!!
			if (true) total2 *= (-1.);
			
			Double_t total = total1 + total2;
			
			Double_t accp = (1.0+para2*pow(hs,2)+para4*pow(hs,4)+para6*pow(hs,6)+para8*pow(hs,8))
			*(acca0+acca1*cos(Phi1)+acca2*cos(2.0*Phi1)+acca4*cos(4.0*Phi1));
			
			return (total*accp);
		}			
		case 11:
		{
			if(printIn) std::cout << "In case 11!" << std::endl;
			
			Double_t PIVal = 3.14159265;
			
			Double_t norm = 8.*PIVal*(32./135135.)*(acca0+acca1*cos(Phi1)+acca2*cos(2.0*Phi1)+acca4*cos(4.0*Phi1));
			
			Double_t term1 = (429.*(-21.+(-11.+2.*fz1Val+8.*fz2Val)*para2+(-9.+4.*fz1Val+8.*fz2Val)*para4)+195.*(-17.+10.*fz1Val+16.*fz2Val)*para6+35.*(-83.+56.*fz1Val+80.*fz2Val)*para8)*
			(-2.*f00Val-fmmVal-fppVal-2.*fmmVal*R2Val*h2+2.*fppVal*R2Val*h2-(-2.*f00Val+fmmVal+fppVal)*h2*h2);
			Double_t term2 = (9009.-429.*(-9.+fz1Val+4.*fz2Val)*para2+143.*(15.+2.*fz1Val-8.*fz2Val)*para4 + 195.*(7.+3.*fz1Val-4.*fz2Val)*para6+35.*(27.+20.*fz1Val-16.*fz2Val)*para8)*
			(2.*f0mVal*R2Val*h2-2.*fp0Val*R2Val*h2-(f0mVal + fp0Val)*(-3. + h2*h2));
			Double_t term3 = -1.*sqrt(f0mVal)*sqrt(fp0Val)*(143.*(-6.*(21.+9.*para2+5.*para4)+fz2Val*(210.+66.*para2+34.*para4)+fz1Val*(105.+69.*para2+41.*para4))+65.*(-42.+59.*fz1Val+46.*fz2Val)*para6+35.*(-54.+77.*fz1Val+58.*fz2Val)*para8)*
			(-1.+h2*h2)*cos(phi0mVal + 2.*Phi1 - phip0Val);
			Double_t term4 = 2.*fpmVal*(143.*(63.+3.*(3.+2.*fz1Val+8.*fz2Val)*para2+(3.+4.*fz1Val+20.*fz2Val)*para4) + 195.*(1.+2.*fz1Val+12.*fz2Val)*para6+35.*(3.+8.*fz1Val+56.*fz2Val)*para8)*(1.+h2*h2);
			Double_t term6 = (3./2.)*sqrt(2./3.)*sqrt(fpmVal)*(-143.*(-42.+(6.-24.*fz1Val)*para2+6.*para4-16.*fz1Val*para4+fz2Val*(105.+9.*para2+para4))+65.*(-10.*+24.*fz1Val+fz2Val)*para6+35.*(-14.+32.*fz1Val+3.*fz2Val)*para8)*
			(-1 + h2*h2)*(sqrt(fmmVal)*cos(2.*Phi1 + phimmVal-phipmVal) + sqrt(fppVal)*cos(2.*Phi1 + phipmVal - phippVal));
			
			
			Double_t total = norm*(term1+term2+term3+term4+term6);
			
			return total;
		}			
		case 12:
		{
			if(printIn) std::cout << "In case 12!" << std::endl;
			
			Double_t PIVal = 3.14159265;
			
			Double_t norm = 8.*PIVal*(32./135135.)*(acca0+acca1*cos(Phi1)+acca2*cos(2.0*Phi1)+acca4*cos(4.0*Phi1));

			Double_t term1 = (429.*(-21.+(-11.+2.*fz1Val+8.*fz2Val)*para2+(-9.+4.*fz1Val+8.*fz2Val)*para4)+195.*(-17.+10.*fz1Val+16.*fz2Val)*para6+35.*(-83.+56.*fz1Val+80.*fz2Val)*para8)*
							 (-2.*f00Val-fmmVal-fppVal-2.*fmmVal*R1Val*h1+2.*fppVal*R1Val*h1-(-2.*f00Val+fmmVal+fppVal)*h1*h1);
			Double_t term2 = (9009.-429.*(-9.+fz1Val+4.*fz2Val)*para2+143.*(15.+2.*fz1Val-8.*fz2Val)*para4 + 195.*(7.+3.*fz1Val-4.*fz2Val)*para6+35.*(27.+20.*fz1Val-16.*fz2Val)*para8)*
		   					 (2.*f0mVal*R1Val*h1-2.*fp0Val*R1Val*h1-(f0mVal + fp0Val)*(-3. + h1*h1));
			Double_t term3 = -1.*sqrt(f0mVal)*sqrt(fp0Val)*(143.*(-6.*(21.+9.*para2+5.*para4)+fz2Val*(210.+66.*para2+34.*para4)+fz1Val*(105.+69.*para2+41.*para4))+65.*(-42.+59.*fz1Val+46.*fz2Val)*para6+35.*(-54.+77.*fz1Val+58.*fz2Val)*para8)*
   			                 (-1.+h1*h1)*cos(phi0mVal + 2.*Phi1 - phip0Val);
			Double_t term4 = 2.*fpmVal*(143.*(63.+3.*(3.+2.*fz1Val+8.*fz2Val)*para2+(3.+4.*fz1Val+20.*fz2Val)*para4) + 195.*(1.+2.*fz1Val+12.*fz2Val)*para6+35.*(3.+8.*fz1Val+56.*fz2Val)*para8)*(1.+h1*h1);
			Double_t term6 = (3./2.)*sqrt(2./3.)*sqrt(fpmVal)*(-143.*(-42.+(6.-24.*fz1Val)*para2+6.*para4-16.*fz1Val*para4+fz2Val*(105.+9.*para2+para4))+65.*(-10.*+24.*fz1Val+fz2Val)*para6+35.*(-14.+32.*fz1Val+3.*fz2Val)*para8)*
			                 (-1 + h1*h1)*(sqrt(fmmVal)*cos(2.*Phi1 + phimmVal-phipmVal) + sqrt(fppVal)*cos(2.*Phi1 + phipmVal - phippVal));
			
						
			Double_t total = norm*(term1+term2+term3+term4+term6);
			
			return total;
		}
			//*/
			/*	
			 case 11:
			 {
			 Double_t PIVal = 3.14159265;
			 
			 Double_t norm = (2./9.)*PIVal;
			 Double_t termA = 64.*fpmVal*(6.-2.*fz1Val-5.*fz2Val-6.*(2.-2.*fz1Val+3.*fz2Val)*pow(hs,2)+pow(hs,4)*(6.-10.*fz1Val-5.*fz2Val));
			 Double_t termBCoeff = 4.*(fz1Val+fz2Val+3.*(2.-3.*fz1Val-2.*fz2Val)*pow(hs,2)-(6.-10.*fz1Val-5.*fz2Val)*pow(hs,4));
			 Double_t termB = 64.*(fp0Val+f0mVal)+9.*sqrt(fp0Val)*sqrt(f0mVal)*pow(PIVal,2)*R1Val*R2Val*cos(Phi-phi0mVal+phip0Val);
			 Double_t termCCoeff = (2.-2.*fz1Val+fz2Val-6.*(2.-4.*fz1Val-fz2Val)*pow(hs,2)+3.*(6.-10.*fz1Val-5.*fz2Val)*pow(hs,4));
			 Double_t termC1 = 64.*(1.-2.*f0mVal-2.*fp0Val-2.*fpmVal);
			 Double_t termC2 = 9.*sqrt(fmmVal)*sqrt(1.-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal)*pow(PIVal,2)*R1Val*R2Val*cos(Phi-phimmVal);
			 Double_t termC3 = 9.*sqrt(fppVal)*sqrt(1.-fppVal-fmmVal-2.*fpmVal-2.*fp0Val-2.*f0mVal)*pow(PIVal,2)*R1Val*R2Val*cos(Phi+phimmVal);
			 Double_t termC4 = 32.*sqrt(fppVal)*sqrt(fmmVal)*cos(2.*Phi-phimmVal+phippVal);
			 
			 Double_t total = norm*(termA + termBCoeff*termB + termCCoeff*(termC1+termC2+termC3+termC4));
			 
			 Double_t accp = (1.0+para2*pow(hs,2)+para4*pow(hs,4)+para6*pow(hs,6)+para8*pow(hs,8))
			 *(acca0+acca1*cos(Phi1)+acca2*cos(2.0*Phi1)+acca4*cos(4.0*Phi1));
			 
			 
			 return (total*accp);
			 }
			 //*/
	}
	
	assert(0) ;
	return 0 ;
}


